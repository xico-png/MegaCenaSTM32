
MegaCena.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08002c58  08002c58  00012c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eb0  08002eb0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002eb0  08002eb0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002eb0  08002eb0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eb0  08002eb0  00012eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002eb4  08002eb4  00012eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  08002f28  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002f28  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003536  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010e3  00000000  00000000  000235cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004a8  00000000  00000000  000246b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000400  00000000  00000000  00024b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170cd  00000000  00000000  00024f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005319  00000000  00000000  0003c02d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080f8e  00000000  00000000  00041346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c22d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ae0  00000000  00000000  000c2324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c40 	.word	0x08002c40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002c40 	.word	0x08002c40

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b0c4      	sub	sp, #272	; 0x110
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fdf1 	bl	8000d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f897 	bl	8000288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8d1 	bl	8000300 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int SorteioReal[60]={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,52,53,54,56,57,58,59,60};
 800015e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000162:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000166:	4a46      	ldr	r2, [pc, #280]	; (8000280 <main+0x134>)
 8000168:	4618      	mov	r0, r3
 800016a:	4611      	mov	r1, r2
 800016c:	23f0      	movs	r3, #240	; 0xf0
 800016e:	461a      	mov	r2, r3
 8000170:	f001 fcfa 	bl	8001b68 <memcpy>
   int sortear6vezes =6;
 8000174:	2306      	movs	r3, #6
 8000176:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   int diminui_indice = 60;
 800017a:	233c      	movs	r3, #60	; 0x3c
 800017c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

   while (sortear6vezes>0)
 8000180:	e074      	b.n	800026c <main+0x120>
   {
 	  int num = rand();
 8000182:	f001 fd1f 	bl	8001bc4 <rand>
 8000186:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 	 	  int sorteado = num%diminui_indice;
 800018a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800018e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000192:	fb93 f2f2 	sdiv	r2, r3, r2
 8000196:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800019a:	fb01 f202 	mul.w	r2, r1, r2
 800019e:	1a9b      	subs	r3, r3, r2
 80001a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 	  for(int i = sorteado;i<diminui_indice; i++){
 80001a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80001a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80001ac:	e017      	b.n	80001de <main+0x92>
 		  SorteioReal[i] = SorteioReal[i++];
 80001ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80001b2:	1c5a      	adds	r2, r3, #1
 80001b4:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80001b8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80001bc:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80001c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80001c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80001c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80001cc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80001d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 	  for(int i = sorteado;i<diminui_indice; i++){
 80001d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80001d8:	3301      	adds	r3, #1
 80001da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80001de:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80001e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80001e6:	429a      	cmp	r2, r3
 80001e8:	dbe1      	blt.n	80001ae <main+0x62>


 	  }
 	  printf(sorteado);
 80001ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80001ee:	4618      	mov	r0, r3
 80001f0:	f001 fcd0 	bl	8001b94 <iprintf>
 	  	int NumeroDisplay = 0;
 80001f4:	2300      	movs	r3, #0
 80001f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 	  	NumeroDisplay = SorteioReal[sorteado];
 80001fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80001fe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000202:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8000206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800020a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 	  	int unidade = NumeroDisplay%10;
 800020e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8000212:	4b1c      	ldr	r3, [pc, #112]	; (8000284 <main+0x138>)
 8000214:	fb83 1302 	smull	r1, r3, r3, r2
 8000218:	1099      	asrs	r1, r3, #2
 800021a:	17d3      	asrs	r3, r2, #31
 800021c:	1ac9      	subs	r1, r1, r3
 800021e:	460b      	mov	r3, r1
 8000220:	009b      	lsls	r3, r3, #2
 8000222:	440b      	add	r3, r1
 8000224:	005b      	lsls	r3, r3, #1
 8000226:	1ad3      	subs	r3, r2, r3
 8000228:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 	  	int dezena = NumeroDisplay/10;
 800022c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000230:	4a14      	ldr	r2, [pc, #80]	; (8000284 <main+0x138>)
 8000232:	fb82 1203 	smull	r1, r2, r2, r3
 8000236:	1092      	asrs	r2, r2, #2
 8000238:	17db      	asrs	r3, r3, #31
 800023a:	1ad3      	subs	r3, r2, r3
 800023c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 	  	Mostra_NumeroD(dezena);
 8000240:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8000244:	f000 f8be 	bl	80003c4 <Mostra_NumeroD>
 	  	Mostra_NumeroU(unidade);
 8000248:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800024c:	f000 fa84 	bl	8000758 <Mostra_NumeroU>
 	  	HAL_Delay(1500);
 8000250:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000254:	f000 fdd2 	bl	8000dfc <HAL_Delay>
 	  	diminui_indice --;
 8000258:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800025c:	3b01      	subs	r3, #1
 800025e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 	  	sortear6vezes--;
 8000262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000266:	3b01      	subs	r3, #1
 8000268:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   while (sortear6vezes>0)
 800026c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000270:	2b00      	cmp	r3, #0
 8000272:	dc86      	bgt.n	8000182 <main+0x36>
 8000274:	2300      	movs	r3, #0



/* USER CODE BEGIN 3 */

}
 8000276:	4618      	mov	r0, r3
 8000278:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	08002c58 	.word	0x08002c58
 8000284:	66666667 	.word	0x66666667

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b090      	sub	sp, #64	; 0x40
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	f107 0318 	add.w	r3, r7, #24
 8000292:	2228      	movs	r2, #40	; 0x28
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f001 fc74 	bl	8001b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
 80002a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002aa:	2302      	movs	r3, #2
 80002ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ae:	2301      	movs	r3, #1
 80002b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b2:	2310      	movs	r3, #16
 80002b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b6:	2300      	movs	r3, #0
 80002b8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ba:	f107 0318 	add.w	r3, r7, #24
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 f840 	bl	8001344 <HAL_RCC_OscConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ca:	f000 fbe9 	bl	8000aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ce:	230f      	movs	r3, #15
 80002d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 faae 	bl	8001848 <HAL_RCC_ClockConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002f2:	f000 fbd5 	bl	8000aa0 <Error_Handler>
  }
}
 80002f6:	bf00      	nop
 80002f8:	3740      	adds	r7, #64	; 0x40
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
	...

08000300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b088      	sub	sp, #32
 8000304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000306:	f107 0310 	add.w	r3, r7, #16
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000314:	4b28      	ldr	r3, [pc, #160]	; (80003b8 <MX_GPIO_Init+0xb8>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a27      	ldr	r2, [pc, #156]	; (80003b8 <MX_GPIO_Init+0xb8>)
 800031a:	f043 0310 	orr.w	r3, r3, #16
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b25      	ldr	r3, [pc, #148]	; (80003b8 <MX_GPIO_Init+0xb8>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0310 	and.w	r3, r3, #16
 8000328:	60fb      	str	r3, [r7, #12]
 800032a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800032c:	4b22      	ldr	r3, [pc, #136]	; (80003b8 <MX_GPIO_Init+0xb8>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a21      	ldr	r2, [pc, #132]	; (80003b8 <MX_GPIO_Init+0xb8>)
 8000332:	f043 0308 	orr.w	r3, r3, #8
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b1f      	ldr	r3, [pc, #124]	; (80003b8 <MX_GPIO_Init+0xb8>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0308 	and.w	r3, r3, #8
 8000340:	60bb      	str	r3, [r7, #8]
 8000342:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000344:	4b1c      	ldr	r3, [pc, #112]	; (80003b8 <MX_GPIO_Init+0xb8>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a1b      	ldr	r2, [pc, #108]	; (80003b8 <MX_GPIO_Init+0xb8>)
 800034a:	f043 0304 	orr.w	r3, r3, #4
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b19      	ldr	r3, [pc, #100]	; (80003b8 <MX_GPIO_Init+0xb8>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f003 0304 	and.w	r3, r3, #4
 8000358:	607b      	str	r3, [r7, #4]
 800035a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000362:	4816      	ldr	r0, [pc, #88]	; (80003bc <MX_GPIO_Init+0xbc>)
 8000364:	f000 ffd6 	bl	8001314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000368:	2200      	movs	r2, #0
 800036a:	f64f 417b 	movw	r1, #64635	; 0xfc7b
 800036e:	4814      	ldr	r0, [pc, #80]	; (80003c0 <MX_GPIO_Init+0xc0>)
 8000370:	f000 ffd0 	bl	8001314 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000374:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000378:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037a:	2301      	movs	r3, #1
 800037c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000382:	2302      	movs	r3, #2
 8000384:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000386:	f107 0310 	add.w	r3, r7, #16
 800038a:	4619      	mov	r1, r3
 800038c:	480b      	ldr	r0, [pc, #44]	; (80003bc <MX_GPIO_Init+0xbc>)
 800038e:	f000 fe3d 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000392:	f64f 437b 	movw	r3, #64635	; 0xfc7b
 8000396:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000398:	2301      	movs	r3, #1
 800039a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039c:	2300      	movs	r3, #0
 800039e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a0:	2302      	movs	r3, #2
 80003a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003a4:	f107 0310 	add.w	r3, r7, #16
 80003a8:	4619      	mov	r1, r3
 80003aa:	4805      	ldr	r0, [pc, #20]	; (80003c0 <MX_GPIO_Init+0xc0>)
 80003ac:	f000 fe2e 	bl	800100c <HAL_GPIO_Init>

}
 80003b0:	bf00      	nop
 80003b2:	3720      	adds	r7, #32
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	40021000 	.word	0x40021000
 80003bc:	40011000 	.word	0x40011000
 80003c0:	40010c00 	.word	0x40010c00

080003c4 <Mostra_NumeroD>:

/* USER CODE BEGIN 4 */

void Mostra_NumeroD(int n)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	switch(n)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	2b09      	cmp	r3, #9
 80003d0:	f200 81bc 	bhi.w	800074c <Mostra_NumeroD+0x388>
 80003d4:	a201      	add	r2, pc, #4	; (adr r2, 80003dc <Mostra_NumeroD+0x18>)
 80003d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003da:	bf00      	nop
 80003dc:	080006f9 	.word	0x080006f9
 80003e0:	08000405 	.word	0x08000405
 80003e4:	08000459 	.word	0x08000459
 80003e8:	080004ad 	.word	0x080004ad
 80003ec:	08000501 	.word	0x08000501
 80003f0:	08000555 	.word	0x08000555
 80003f4:	080005a9 	.word	0x080005a9
 80003f8:	080005fd 	.word	0x080005fd
 80003fc:	08000651 	.word	0x08000651
 8000400:	080006a5 	.word	0x080006a5
	{
	case 1:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1); //g
 8000404:	2201      	movs	r2, #1
 8000406:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800040a:	48d2      	ldr	r0, [pc, #840]	; (8000754 <Mostra_NumeroD+0x390>)
 800040c:	f000 ff82 	bl	8001314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1); //f
 8000410:	2201      	movs	r2, #1
 8000412:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000416:	48cf      	ldr	r0, [pc, #828]	; (8000754 <Mostra_NumeroD+0x390>)
 8000418:	f000 ff7c 	bl	8001314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);  //a
 800041c:	2201      	movs	r2, #1
 800041e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000422:	48cc      	ldr	r0, [pc, #816]	; (8000754 <Mostra_NumeroD+0x390>)
 8000424:	f000 ff76 	bl	8001314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0); // b
 8000428:	2200      	movs	r2, #0
 800042a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800042e:	48c9      	ldr	r0, [pc, #804]	; (8000754 <Mostra_NumeroD+0x390>)
 8000430:	f000 ff70 	bl	8001314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);  //e
 8000434:	2201      	movs	r2, #1
 8000436:	2102      	movs	r1, #2
 8000438:	48c6      	ldr	r0, [pc, #792]	; (8000754 <Mostra_NumeroD+0x390>)
 800043a:	f000 ff6b 	bl	8001314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1); //d
 800043e:	2201      	movs	r2, #1
 8000440:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000444:	48c3      	ldr	r0, [pc, #780]	; (8000754 <Mostra_NumeroD+0x390>)
 8000446:	f000 ff65 	bl	8001314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0); //c
 800044a:	2200      	movs	r2, #0
 800044c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000450:	48c0      	ldr	r0, [pc, #768]	; (8000754 <Mostra_NumeroD+0x390>)
 8000452:	f000 ff5f 	bl	8001314 <HAL_GPIO_WritePin>
		break;
 8000456:	e179      	b.n	800074c <Mostra_NumeroD+0x388>
	case 2:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0); //g
 8000458:	2200      	movs	r2, #0
 800045a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800045e:	48bd      	ldr	r0, [pc, #756]	; (8000754 <Mostra_NumeroD+0x390>)
 8000460:	f000 ff58 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1); //f
 8000464:	2201      	movs	r2, #1
 8000466:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046a:	48ba      	ldr	r0, [pc, #744]	; (8000754 <Mostra_NumeroD+0x390>)
 800046c:	f000 ff52 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);  //a
 8000470:	2200      	movs	r2, #0
 8000472:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000476:	48b7      	ldr	r0, [pc, #732]	; (8000754 <Mostra_NumeroD+0x390>)
 8000478:	f000 ff4c 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0); // b
 800047c:	2200      	movs	r2, #0
 800047e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000482:	48b4      	ldr	r0, [pc, #720]	; (8000754 <Mostra_NumeroD+0x390>)
 8000484:	f000 ff46 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);  //e
 8000488:	2200      	movs	r2, #0
 800048a:	2102      	movs	r1, #2
 800048c:	48b1      	ldr	r0, [pc, #708]	; (8000754 <Mostra_NumeroD+0x390>)
 800048e:	f000 ff41 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0); //d
 8000492:	2200      	movs	r2, #0
 8000494:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000498:	48ae      	ldr	r0, [pc, #696]	; (8000754 <Mostra_NumeroD+0x390>)
 800049a:	f000 ff3b 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1); //c
 800049e:	2201      	movs	r2, #1
 80004a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004a4:	48ab      	ldr	r0, [pc, #684]	; (8000754 <Mostra_NumeroD+0x390>)
 80004a6:	f000 ff35 	bl	8001314 <HAL_GPIO_WritePin>
		break;
 80004aa:	e14f      	b.n	800074c <Mostra_NumeroD+0x388>
	case 3:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0); //g
 80004ac:	2200      	movs	r2, #0
 80004ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004b2:	48a8      	ldr	r0, [pc, #672]	; (8000754 <Mostra_NumeroD+0x390>)
 80004b4:	f000 ff2e 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1); //f
 80004b8:	2201      	movs	r2, #1
 80004ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004be:	48a5      	ldr	r0, [pc, #660]	; (8000754 <Mostra_NumeroD+0x390>)
 80004c0:	f000 ff28 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);  //a
 80004c4:	2200      	movs	r2, #0
 80004c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ca:	48a2      	ldr	r0, [pc, #648]	; (8000754 <Mostra_NumeroD+0x390>)
 80004cc:	f000 ff22 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0); // b
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004d6:	489f      	ldr	r0, [pc, #636]	; (8000754 <Mostra_NumeroD+0x390>)
 80004d8:	f000 ff1c 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);  //e
 80004dc:	2201      	movs	r2, #1
 80004de:	2102      	movs	r1, #2
 80004e0:	489c      	ldr	r0, [pc, #624]	; (8000754 <Mostra_NumeroD+0x390>)
 80004e2:	f000 ff17 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0); //d
 80004e6:	2200      	movs	r2, #0
 80004e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ec:	4899      	ldr	r0, [pc, #612]	; (8000754 <Mostra_NumeroD+0x390>)
 80004ee:	f000 ff11 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0); //c
 80004f2:	2200      	movs	r2, #0
 80004f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f8:	4896      	ldr	r0, [pc, #600]	; (8000754 <Mostra_NumeroD+0x390>)
 80004fa:	f000 ff0b 	bl	8001314 <HAL_GPIO_WritePin>
		break;
 80004fe:	e125      	b.n	800074c <Mostra_NumeroD+0x388>
	case 4:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0); //g
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000506:	4893      	ldr	r0, [pc, #588]	; (8000754 <Mostra_NumeroD+0x390>)
 8000508:	f000 ff04 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //f
 800050c:	2200      	movs	r2, #0
 800050e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000512:	4890      	ldr	r0, [pc, #576]	; (8000754 <Mostra_NumeroD+0x390>)
 8000514:	f000 fefe 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);  //a
 8000518:	2201      	movs	r2, #1
 800051a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800051e:	488d      	ldr	r0, [pc, #564]	; (8000754 <Mostra_NumeroD+0x390>)
 8000520:	f000 fef8 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0); // b
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800052a:	488a      	ldr	r0, [pc, #552]	; (8000754 <Mostra_NumeroD+0x390>)
 800052c:	f000 fef2 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);  //e
 8000530:	2201      	movs	r2, #1
 8000532:	2102      	movs	r1, #2
 8000534:	4887      	ldr	r0, [pc, #540]	; (8000754 <Mostra_NumeroD+0x390>)
 8000536:	f000 feed 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1); //d
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000540:	4884      	ldr	r0, [pc, #528]	; (8000754 <Mostra_NumeroD+0x390>)
 8000542:	f000 fee7 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0); //c
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800054c:	4881      	ldr	r0, [pc, #516]	; (8000754 <Mostra_NumeroD+0x390>)
 800054e:	f000 fee1 	bl	8001314 <HAL_GPIO_WritePin>
		break;
 8000552:	e0fb      	b.n	800074c <Mostra_NumeroD+0x388>
	case 5:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0); //g
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800055a:	487e      	ldr	r0, [pc, #504]	; (8000754 <Mostra_NumeroD+0x390>)
 800055c:	f000 feda 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //f
 8000560:	2200      	movs	r2, #0
 8000562:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000566:	487b      	ldr	r0, [pc, #492]	; (8000754 <Mostra_NumeroD+0x390>)
 8000568:	f000 fed4 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);  //a
 800056c:	2200      	movs	r2, #0
 800056e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000572:	4878      	ldr	r0, [pc, #480]	; (8000754 <Mostra_NumeroD+0x390>)
 8000574:	f000 fece 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1); // b
 8000578:	2201      	movs	r2, #1
 800057a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800057e:	4875      	ldr	r0, [pc, #468]	; (8000754 <Mostra_NumeroD+0x390>)
 8000580:	f000 fec8 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);  //e
 8000584:	2201      	movs	r2, #1
 8000586:	2102      	movs	r1, #2
 8000588:	4872      	ldr	r0, [pc, #456]	; (8000754 <Mostra_NumeroD+0x390>)
 800058a:	f000 fec3 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0); //d
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000594:	486f      	ldr	r0, [pc, #444]	; (8000754 <Mostra_NumeroD+0x390>)
 8000596:	f000 febd 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0); //c
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005a0:	486c      	ldr	r0, [pc, #432]	; (8000754 <Mostra_NumeroD+0x390>)
 80005a2:	f000 feb7 	bl	8001314 <HAL_GPIO_WritePin>
		break;
 80005a6:	e0d1      	b.n	800074c <Mostra_NumeroD+0x388>
	case 6:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0); //g
 80005a8:	2200      	movs	r2, #0
 80005aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ae:	4869      	ldr	r0, [pc, #420]	; (8000754 <Mostra_NumeroD+0x390>)
 80005b0:	f000 feb0 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //f
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ba:	4866      	ldr	r0, [pc, #408]	; (8000754 <Mostra_NumeroD+0x390>)
 80005bc:	f000 feaa 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);  //a
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c6:	4863      	ldr	r0, [pc, #396]	; (8000754 <Mostra_NumeroD+0x390>)
 80005c8:	f000 fea4 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1); // b
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005d2:	4860      	ldr	r0, [pc, #384]	; (8000754 <Mostra_NumeroD+0x390>)
 80005d4:	f000 fe9e 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);  //e
 80005d8:	2200      	movs	r2, #0
 80005da:	2102      	movs	r1, #2
 80005dc:	485d      	ldr	r0, [pc, #372]	; (8000754 <Mostra_NumeroD+0x390>)
 80005de:	f000 fe99 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0); //d
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e8:	485a      	ldr	r0, [pc, #360]	; (8000754 <Mostra_NumeroD+0x390>)
 80005ea:	f000 fe93 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0); //c
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005f4:	4857      	ldr	r0, [pc, #348]	; (8000754 <Mostra_NumeroD+0x390>)
 80005f6:	f000 fe8d 	bl	8001314 <HAL_GPIO_WritePin>
		break;
 80005fa:	e0a7      	b.n	800074c <Mostra_NumeroD+0x388>
	case 7:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1); //g
 80005fc:	2201      	movs	r2, #1
 80005fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000602:	4854      	ldr	r0, [pc, #336]	; (8000754 <Mostra_NumeroD+0x390>)
 8000604:	f000 fe86 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1); //f
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800060e:	4851      	ldr	r0, [pc, #324]	; (8000754 <Mostra_NumeroD+0x390>)
 8000610:	f000 fe80 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);  //a
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800061a:	484e      	ldr	r0, [pc, #312]	; (8000754 <Mostra_NumeroD+0x390>)
 800061c:	f000 fe7a 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0); // b
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000626:	484b      	ldr	r0, [pc, #300]	; (8000754 <Mostra_NumeroD+0x390>)
 8000628:	f000 fe74 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);  //e
 800062c:	2201      	movs	r2, #1
 800062e:	2102      	movs	r1, #2
 8000630:	4848      	ldr	r0, [pc, #288]	; (8000754 <Mostra_NumeroD+0x390>)
 8000632:	f000 fe6f 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1); //d
 8000636:	2201      	movs	r2, #1
 8000638:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800063c:	4845      	ldr	r0, [pc, #276]	; (8000754 <Mostra_NumeroD+0x390>)
 800063e:	f000 fe69 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0); //c
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000648:	4842      	ldr	r0, [pc, #264]	; (8000754 <Mostra_NumeroD+0x390>)
 800064a:	f000 fe63 	bl	8001314 <HAL_GPIO_WritePin>
			break;
 800064e:	e07d      	b.n	800074c <Mostra_NumeroD+0x388>
	case 8:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0); //g
 8000650:	2200      	movs	r2, #0
 8000652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000656:	483f      	ldr	r0, [pc, #252]	; (8000754 <Mostra_NumeroD+0x390>)
 8000658:	f000 fe5c 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //f
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000662:	483c      	ldr	r0, [pc, #240]	; (8000754 <Mostra_NumeroD+0x390>)
 8000664:	f000 fe56 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);  //a
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800066e:	4839      	ldr	r0, [pc, #228]	; (8000754 <Mostra_NumeroD+0x390>)
 8000670:	f000 fe50 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0); // b
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800067a:	4836      	ldr	r0, [pc, #216]	; (8000754 <Mostra_NumeroD+0x390>)
 800067c:	f000 fe4a 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);  //e
 8000680:	2200      	movs	r2, #0
 8000682:	2102      	movs	r1, #2
 8000684:	4833      	ldr	r0, [pc, #204]	; (8000754 <Mostra_NumeroD+0x390>)
 8000686:	f000 fe45 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0); //d
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000690:	4830      	ldr	r0, [pc, #192]	; (8000754 <Mostra_NumeroD+0x390>)
 8000692:	f000 fe3f 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0); //c
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800069c:	482d      	ldr	r0, [pc, #180]	; (8000754 <Mostra_NumeroD+0x390>)
 800069e:	f000 fe39 	bl	8001314 <HAL_GPIO_WritePin>
			break;
 80006a2:	e053      	b.n	800074c <Mostra_NumeroD+0x388>
	case 9:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0); //g
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006aa:	482a      	ldr	r0, [pc, #168]	; (8000754 <Mostra_NumeroD+0x390>)
 80006ac:	f000 fe32 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //f
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b6:	4827      	ldr	r0, [pc, #156]	; (8000754 <Mostra_NumeroD+0x390>)
 80006b8:	f000 fe2c 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);  //a
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c2:	4824      	ldr	r0, [pc, #144]	; (8000754 <Mostra_NumeroD+0x390>)
 80006c4:	f000 fe26 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0); // b
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ce:	4821      	ldr	r0, [pc, #132]	; (8000754 <Mostra_NumeroD+0x390>)
 80006d0:	f000 fe20 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);  //e
 80006d4:	2201      	movs	r2, #1
 80006d6:	2102      	movs	r1, #2
 80006d8:	481e      	ldr	r0, [pc, #120]	; (8000754 <Mostra_NumeroD+0x390>)
 80006da:	f000 fe1b 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0); //d
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e4:	481b      	ldr	r0, [pc, #108]	; (8000754 <Mostra_NumeroD+0x390>)
 80006e6:	f000 fe15 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0); //c
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006f0:	4818      	ldr	r0, [pc, #96]	; (8000754 <Mostra_NumeroD+0x390>)
 80006f2:	f000 fe0f 	bl	8001314 <HAL_GPIO_WritePin>
			break;
 80006f6:	e029      	b.n	800074c <Mostra_NumeroD+0x388>
	case 0:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1); //g
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006fe:	4815      	ldr	r0, [pc, #84]	; (8000754 <Mostra_NumeroD+0x390>)
 8000700:	f000 fe08 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //f
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800070a:	4812      	ldr	r0, [pc, #72]	; (8000754 <Mostra_NumeroD+0x390>)
 800070c:	f000 fe02 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);  //a
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000716:	480f      	ldr	r0, [pc, #60]	; (8000754 <Mostra_NumeroD+0x390>)
 8000718:	f000 fdfc 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0); // b
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000722:	480c      	ldr	r0, [pc, #48]	; (8000754 <Mostra_NumeroD+0x390>)
 8000724:	f000 fdf6 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);  //e
 8000728:	2200      	movs	r2, #0
 800072a:	2102      	movs	r1, #2
 800072c:	4809      	ldr	r0, [pc, #36]	; (8000754 <Mostra_NumeroD+0x390>)
 800072e:	f000 fdf1 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0); //d
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000738:	4806      	ldr	r0, [pc, #24]	; (8000754 <Mostra_NumeroD+0x390>)
 800073a:	f000 fdeb 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0); //c
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000744:	4803      	ldr	r0, [pc, #12]	; (8000754 <Mostra_NumeroD+0x390>)
 8000746:	f000 fde5 	bl	8001314 <HAL_GPIO_WritePin>
			break;
 800074a:	bf00      	nop
	}
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40010c00 	.word	0x40010c00

08000758 <Mostra_NumeroU>:



void Mostra_NumeroU(int a)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	switch(a)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b09      	cmp	r3, #9
 8000764:	f200 8194 	bhi.w	8000a90 <Mostra_NumeroU+0x338>
 8000768:	a201      	add	r2, pc, #4	; (adr r2, 8000770 <Mostra_NumeroU+0x18>)
 800076a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800076e:	bf00      	nop
 8000770:	08000a45 	.word	0x08000a45
 8000774:	08000799 	.word	0x08000799
 8000778:	080007e5 	.word	0x080007e5
 800077c:	08000831 	.word	0x08000831
 8000780:	0800087d 	.word	0x0800087d
 8000784:	080008c9 	.word	0x080008c9
 8000788:	08000915 	.word	0x08000915
 800078c:	08000961 	.word	0x08000961
 8000790:	080009ad 	.word	0x080009ad
 8000794:	080009f9 	.word	0x080009f9
	{
	case 1:
		HAL_GPIO_WritePin(GPIOB, G1G, 1); //g
 8000798:	2201      	movs	r2, #1
 800079a:	2120      	movs	r1, #32
 800079c:	48be      	ldr	r0, [pc, #760]	; (8000a98 <Mostra_NumeroU+0x340>)
 800079e:	f000 fdb9 	bl	8001314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G1F, 1); //f
 80007a2:	2201      	movs	r2, #1
 80007a4:	2140      	movs	r1, #64	; 0x40
 80007a6:	48bc      	ldr	r0, [pc, #752]	; (8000a98 <Mostra_NumeroU+0x340>)
 80007a8:	f000 fdb4 	bl	8001314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G1A, 1);  //a
 80007ac:	2201      	movs	r2, #1
 80007ae:	2110      	movs	r1, #16
 80007b0:	48b9      	ldr	r0, [pc, #740]	; (8000a98 <Mostra_NumeroU+0x340>)
 80007b2:	f000 fdaf 	bl	8001314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G1B, 0); // b
 80007b6:	2200      	movs	r2, #0
 80007b8:	2108      	movs	r1, #8
 80007ba:	48b7      	ldr	r0, [pc, #732]	; (8000a98 <Mostra_NumeroU+0x340>)
 80007bc:	f000 fdaa 	bl	8001314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, G1E, 1);  //e
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c6:	48b5      	ldr	r0, [pc, #724]	; (8000a9c <Mostra_NumeroU+0x344>)
 80007c8:	f000 fda4 	bl	8001314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, G1D, 1); //d
 80007cc:	2201      	movs	r2, #1
 80007ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007d2:	48b2      	ldr	r0, [pc, #712]	; (8000a9c <Mostra_NumeroU+0x344>)
 80007d4:	f000 fd9e 	bl	8001314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G1C, 0); //c
 80007d8:	2200      	movs	r2, #0
 80007da:	2101      	movs	r1, #1
 80007dc:	48ae      	ldr	r0, [pc, #696]	; (8000a98 <Mostra_NumeroU+0x340>)
 80007de:	f000 fd99 	bl	8001314 <HAL_GPIO_WritePin>
		break;
 80007e2:	e155      	b.n	8000a90 <Mostra_NumeroU+0x338>
	case 2:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); //g
 80007e4:	2200      	movs	r2, #0
 80007e6:	2120      	movs	r1, #32
 80007e8:	48ab      	ldr	r0, [pc, #684]	; (8000a98 <Mostra_NumeroU+0x340>)
 80007ea:	f000 fd93 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1); //f
 80007ee:	2201      	movs	r2, #1
 80007f0:	2140      	movs	r1, #64	; 0x40
 80007f2:	48a9      	ldr	r0, [pc, #676]	; (8000a98 <Mostra_NumeroU+0x340>)
 80007f4:	f000 fd8e 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);  //a
 80007f8:	2200      	movs	r2, #0
 80007fa:	2110      	movs	r1, #16
 80007fc:	48a6      	ldr	r0, [pc, #664]	; (8000a98 <Mostra_NumeroU+0x340>)
 80007fe:	f000 fd89 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0); // b
 8000802:	2200      	movs	r2, #0
 8000804:	2108      	movs	r1, #8
 8000806:	48a4      	ldr	r0, [pc, #656]	; (8000a98 <Mostra_NumeroU+0x340>)
 8000808:	f000 fd84 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);  //e
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000812:	48a2      	ldr	r0, [pc, #648]	; (8000a9c <Mostra_NumeroU+0x344>)
 8000814:	f000 fd7e 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0); //d
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800081e:	489f      	ldr	r0, [pc, #636]	; (8000a9c <Mostra_NumeroU+0x344>)
 8000820:	f000 fd78 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1); //c
 8000824:	2201      	movs	r2, #1
 8000826:	2101      	movs	r1, #1
 8000828:	489b      	ldr	r0, [pc, #620]	; (8000a98 <Mostra_NumeroU+0x340>)
 800082a:	f000 fd73 	bl	8001314 <HAL_GPIO_WritePin>
		break;
 800082e:	e12f      	b.n	8000a90 <Mostra_NumeroU+0x338>
	case 3:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); //g
 8000830:	2200      	movs	r2, #0
 8000832:	2120      	movs	r1, #32
 8000834:	4898      	ldr	r0, [pc, #608]	; (8000a98 <Mostra_NumeroU+0x340>)
 8000836:	f000 fd6d 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1); //f
 800083a:	2201      	movs	r2, #1
 800083c:	2140      	movs	r1, #64	; 0x40
 800083e:	4896      	ldr	r0, [pc, #600]	; (8000a98 <Mostra_NumeroU+0x340>)
 8000840:	f000 fd68 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);  //a
 8000844:	2200      	movs	r2, #0
 8000846:	2110      	movs	r1, #16
 8000848:	4893      	ldr	r0, [pc, #588]	; (8000a98 <Mostra_NumeroU+0x340>)
 800084a:	f000 fd63 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0); // b
 800084e:	2200      	movs	r2, #0
 8000850:	2108      	movs	r1, #8
 8000852:	4891      	ldr	r0, [pc, #580]	; (8000a98 <Mostra_NumeroU+0x340>)
 8000854:	f000 fd5e 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);  //e
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800085e:	488f      	ldr	r0, [pc, #572]	; (8000a9c <Mostra_NumeroU+0x344>)
 8000860:	f000 fd58 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0); //d
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800086a:	488c      	ldr	r0, [pc, #560]	; (8000a9c <Mostra_NumeroU+0x344>)
 800086c:	f000 fd52 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0); //c
 8000870:	2200      	movs	r2, #0
 8000872:	2101      	movs	r1, #1
 8000874:	4888      	ldr	r0, [pc, #544]	; (8000a98 <Mostra_NumeroU+0x340>)
 8000876:	f000 fd4d 	bl	8001314 <HAL_GPIO_WritePin>
		break;
 800087a:	e109      	b.n	8000a90 <Mostra_NumeroU+0x338>
	case 4:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); //g
 800087c:	2200      	movs	r2, #0
 800087e:	2120      	movs	r1, #32
 8000880:	4885      	ldr	r0, [pc, #532]	; (8000a98 <Mostra_NumeroU+0x340>)
 8000882:	f000 fd47 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0); //f
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	; 0x40
 800088a:	4883      	ldr	r0, [pc, #524]	; (8000a98 <Mostra_NumeroU+0x340>)
 800088c:	f000 fd42 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);  //a
 8000890:	2201      	movs	r2, #1
 8000892:	2110      	movs	r1, #16
 8000894:	4880      	ldr	r0, [pc, #512]	; (8000a98 <Mostra_NumeroU+0x340>)
 8000896:	f000 fd3d 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0); // b
 800089a:	2200      	movs	r2, #0
 800089c:	2108      	movs	r1, #8
 800089e:	487e      	ldr	r0, [pc, #504]	; (8000a98 <Mostra_NumeroU+0x340>)
 80008a0:	f000 fd38 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);  //e
 80008a4:	2201      	movs	r2, #1
 80008a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008aa:	487c      	ldr	r0, [pc, #496]	; (8000a9c <Mostra_NumeroU+0x344>)
 80008ac:	f000 fd32 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1); //d
 80008b0:	2201      	movs	r2, #1
 80008b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008b6:	4879      	ldr	r0, [pc, #484]	; (8000a9c <Mostra_NumeroU+0x344>)
 80008b8:	f000 fd2c 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0); //c
 80008bc:	2200      	movs	r2, #0
 80008be:	2101      	movs	r1, #1
 80008c0:	4875      	ldr	r0, [pc, #468]	; (8000a98 <Mostra_NumeroU+0x340>)
 80008c2:	f000 fd27 	bl	8001314 <HAL_GPIO_WritePin>
		break;
 80008c6:	e0e3      	b.n	8000a90 <Mostra_NumeroU+0x338>
	case 5:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); //g
 80008c8:	2200      	movs	r2, #0
 80008ca:	2120      	movs	r1, #32
 80008cc:	4872      	ldr	r0, [pc, #456]	; (8000a98 <Mostra_NumeroU+0x340>)
 80008ce:	f000 fd21 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0); //f
 80008d2:	2200      	movs	r2, #0
 80008d4:	2140      	movs	r1, #64	; 0x40
 80008d6:	4870      	ldr	r0, [pc, #448]	; (8000a98 <Mostra_NumeroU+0x340>)
 80008d8:	f000 fd1c 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);  //a
 80008dc:	2200      	movs	r2, #0
 80008de:	2110      	movs	r1, #16
 80008e0:	486d      	ldr	r0, [pc, #436]	; (8000a98 <Mostra_NumeroU+0x340>)
 80008e2:	f000 fd17 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1); // b
 80008e6:	2201      	movs	r2, #1
 80008e8:	2108      	movs	r1, #8
 80008ea:	486b      	ldr	r0, [pc, #428]	; (8000a98 <Mostra_NumeroU+0x340>)
 80008ec:	f000 fd12 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);  //e
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008f6:	4869      	ldr	r0, [pc, #420]	; (8000a9c <Mostra_NumeroU+0x344>)
 80008f8:	f000 fd0c 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0); //d
 80008fc:	2200      	movs	r2, #0
 80008fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000902:	4866      	ldr	r0, [pc, #408]	; (8000a9c <Mostra_NumeroU+0x344>)
 8000904:	f000 fd06 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0); //c
 8000908:	2200      	movs	r2, #0
 800090a:	2101      	movs	r1, #1
 800090c:	4862      	ldr	r0, [pc, #392]	; (8000a98 <Mostra_NumeroU+0x340>)
 800090e:	f000 fd01 	bl	8001314 <HAL_GPIO_WritePin>
		break;
 8000912:	e0bd      	b.n	8000a90 <Mostra_NumeroU+0x338>
	case 6:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); //g
 8000914:	2200      	movs	r2, #0
 8000916:	2120      	movs	r1, #32
 8000918:	485f      	ldr	r0, [pc, #380]	; (8000a98 <Mostra_NumeroU+0x340>)
 800091a:	f000 fcfb 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0); //f
 800091e:	2200      	movs	r2, #0
 8000920:	2140      	movs	r1, #64	; 0x40
 8000922:	485d      	ldr	r0, [pc, #372]	; (8000a98 <Mostra_NumeroU+0x340>)
 8000924:	f000 fcf6 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);  //a
 8000928:	2200      	movs	r2, #0
 800092a:	2110      	movs	r1, #16
 800092c:	485a      	ldr	r0, [pc, #360]	; (8000a98 <Mostra_NumeroU+0x340>)
 800092e:	f000 fcf1 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1); // b
 8000932:	2201      	movs	r2, #1
 8000934:	2108      	movs	r1, #8
 8000936:	4858      	ldr	r0, [pc, #352]	; (8000a98 <Mostra_NumeroU+0x340>)
 8000938:	f000 fcec 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0);  //e
 800093c:	2200      	movs	r2, #0
 800093e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000942:	4856      	ldr	r0, [pc, #344]	; (8000a9c <Mostra_NumeroU+0x344>)
 8000944:	f000 fce6 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0); //d
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800094e:	4853      	ldr	r0, [pc, #332]	; (8000a9c <Mostra_NumeroU+0x344>)
 8000950:	f000 fce0 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0); //c
 8000954:	2200      	movs	r2, #0
 8000956:	2101      	movs	r1, #1
 8000958:	484f      	ldr	r0, [pc, #316]	; (8000a98 <Mostra_NumeroU+0x340>)
 800095a:	f000 fcdb 	bl	8001314 <HAL_GPIO_WritePin>
		break;
 800095e:	e097      	b.n	8000a90 <Mostra_NumeroU+0x338>
	case 7:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1); //g
 8000960:	2201      	movs	r2, #1
 8000962:	2120      	movs	r1, #32
 8000964:	484c      	ldr	r0, [pc, #304]	; (8000a98 <Mostra_NumeroU+0x340>)
 8000966:	f000 fcd5 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1); //f
 800096a:	2201      	movs	r2, #1
 800096c:	2140      	movs	r1, #64	; 0x40
 800096e:	484a      	ldr	r0, [pc, #296]	; (8000a98 <Mostra_NumeroU+0x340>)
 8000970:	f000 fcd0 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);  //a
 8000974:	2200      	movs	r2, #0
 8000976:	2110      	movs	r1, #16
 8000978:	4847      	ldr	r0, [pc, #284]	; (8000a98 <Mostra_NumeroU+0x340>)
 800097a:	f000 fccb 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0); // b
 800097e:	2200      	movs	r2, #0
 8000980:	2108      	movs	r1, #8
 8000982:	4845      	ldr	r0, [pc, #276]	; (8000a98 <Mostra_NumeroU+0x340>)
 8000984:	f000 fcc6 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);  //e
 8000988:	2201      	movs	r2, #1
 800098a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800098e:	4843      	ldr	r0, [pc, #268]	; (8000a9c <Mostra_NumeroU+0x344>)
 8000990:	f000 fcc0 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1); //d
 8000994:	2201      	movs	r2, #1
 8000996:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800099a:	4840      	ldr	r0, [pc, #256]	; (8000a9c <Mostra_NumeroU+0x344>)
 800099c:	f000 fcba 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0); //c
 80009a0:	2200      	movs	r2, #0
 80009a2:	2101      	movs	r1, #1
 80009a4:	483c      	ldr	r0, [pc, #240]	; (8000a98 <Mostra_NumeroU+0x340>)
 80009a6:	f000 fcb5 	bl	8001314 <HAL_GPIO_WritePin>
			break;
 80009aa:	e071      	b.n	8000a90 <Mostra_NumeroU+0x338>
	case 8:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); //g
 80009ac:	2200      	movs	r2, #0
 80009ae:	2120      	movs	r1, #32
 80009b0:	4839      	ldr	r0, [pc, #228]	; (8000a98 <Mostra_NumeroU+0x340>)
 80009b2:	f000 fcaf 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0); //f
 80009b6:	2200      	movs	r2, #0
 80009b8:	2140      	movs	r1, #64	; 0x40
 80009ba:	4837      	ldr	r0, [pc, #220]	; (8000a98 <Mostra_NumeroU+0x340>)
 80009bc:	f000 fcaa 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);  //a
 80009c0:	2200      	movs	r2, #0
 80009c2:	2110      	movs	r1, #16
 80009c4:	4834      	ldr	r0, [pc, #208]	; (8000a98 <Mostra_NumeroU+0x340>)
 80009c6:	f000 fca5 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0); // b
 80009ca:	2200      	movs	r2, #0
 80009cc:	2108      	movs	r1, #8
 80009ce:	4832      	ldr	r0, [pc, #200]	; (8000a98 <Mostra_NumeroU+0x340>)
 80009d0:	f000 fca0 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0);  //e
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009da:	4830      	ldr	r0, [pc, #192]	; (8000a9c <Mostra_NumeroU+0x344>)
 80009dc:	f000 fc9a 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0); //d
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009e6:	482d      	ldr	r0, [pc, #180]	; (8000a9c <Mostra_NumeroU+0x344>)
 80009e8:	f000 fc94 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0); //c
 80009ec:	2200      	movs	r2, #0
 80009ee:	2101      	movs	r1, #1
 80009f0:	4829      	ldr	r0, [pc, #164]	; (8000a98 <Mostra_NumeroU+0x340>)
 80009f2:	f000 fc8f 	bl	8001314 <HAL_GPIO_WritePin>
			break;
 80009f6:	e04b      	b.n	8000a90 <Mostra_NumeroU+0x338>
	case 9:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); //g
 80009f8:	2200      	movs	r2, #0
 80009fa:	2120      	movs	r1, #32
 80009fc:	4826      	ldr	r0, [pc, #152]	; (8000a98 <Mostra_NumeroU+0x340>)
 80009fe:	f000 fc89 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0); //f
 8000a02:	2200      	movs	r2, #0
 8000a04:	2140      	movs	r1, #64	; 0x40
 8000a06:	4824      	ldr	r0, [pc, #144]	; (8000a98 <Mostra_NumeroU+0x340>)
 8000a08:	f000 fc84 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);  //a
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2110      	movs	r1, #16
 8000a10:	4821      	ldr	r0, [pc, #132]	; (8000a98 <Mostra_NumeroU+0x340>)
 8000a12:	f000 fc7f 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0); // b
 8000a16:	2200      	movs	r2, #0
 8000a18:	2108      	movs	r1, #8
 8000a1a:	481f      	ldr	r0, [pc, #124]	; (8000a98 <Mostra_NumeroU+0x340>)
 8000a1c:	f000 fc7a 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);  //e
 8000a20:	2201      	movs	r2, #1
 8000a22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a26:	481d      	ldr	r0, [pc, #116]	; (8000a9c <Mostra_NumeroU+0x344>)
 8000a28:	f000 fc74 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0); //d
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a32:	481a      	ldr	r0, [pc, #104]	; (8000a9c <Mostra_NumeroU+0x344>)
 8000a34:	f000 fc6e 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0); //c
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	4816      	ldr	r0, [pc, #88]	; (8000a98 <Mostra_NumeroU+0x340>)
 8000a3e:	f000 fc69 	bl	8001314 <HAL_GPIO_WritePin>
			break;
 8000a42:	e025      	b.n	8000a90 <Mostra_NumeroU+0x338>
	case 0:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1); //g
 8000a44:	2201      	movs	r2, #1
 8000a46:	2120      	movs	r1, #32
 8000a48:	4813      	ldr	r0, [pc, #76]	; (8000a98 <Mostra_NumeroU+0x340>)
 8000a4a:	f000 fc63 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0); //f
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2140      	movs	r1, #64	; 0x40
 8000a52:	4811      	ldr	r0, [pc, #68]	; (8000a98 <Mostra_NumeroU+0x340>)
 8000a54:	f000 fc5e 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);  //a
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	480e      	ldr	r0, [pc, #56]	; (8000a98 <Mostra_NumeroU+0x340>)
 8000a5e:	f000 fc59 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0); // b
 8000a62:	2200      	movs	r2, #0
 8000a64:	2108      	movs	r1, #8
 8000a66:	480c      	ldr	r0, [pc, #48]	; (8000a98 <Mostra_NumeroU+0x340>)
 8000a68:	f000 fc54 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0);  //e
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a72:	480a      	ldr	r0, [pc, #40]	; (8000a9c <Mostra_NumeroU+0x344>)
 8000a74:	f000 fc4e 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0); //d
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a7e:	4807      	ldr	r0, [pc, #28]	; (8000a9c <Mostra_NumeroU+0x344>)
 8000a80:	f000 fc48 	bl	8001314 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0); //c
 8000a84:	2200      	movs	r2, #0
 8000a86:	2101      	movs	r1, #1
 8000a88:	4803      	ldr	r0, [pc, #12]	; (8000a98 <Mostra_NumeroU+0x340>)
 8000a8a:	f000 fc43 	bl	8001314 <HAL_GPIO_WritePin>
			break;
 8000a8e:	bf00      	nop
	}
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40010c00 	.word	0x40010c00
 8000a9c:	40011000 	.word	0x40011000

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	4a14      	ldr	r2, [pc, #80]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6193      	str	r3, [r2, #24]
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <HAL_MspInit+0x5c>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	61d3      	str	r3, [r2, #28]
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <HAL_MspInit+0x60>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <HAL_MspInit+0x60>)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40010000 	.word	0x40010000

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler+0x4>

08000b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <MemManage_Handler+0x4>

08000b22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr

08000b3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr

08000b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr

08000b52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b56:	f000 f935 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
	return 1;
 8000b62:	2301      	movs	r3, #1
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr

08000b6c <_kill>:

int _kill(int pid, int sig)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b76:	f000 ffcd 	bl	8001b14 <__errno>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2216      	movs	r2, #22
 8000b7e:	601a      	str	r2, [r3, #0]
	return -1;
 8000b80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <_exit>:

void _exit (int status)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b94:	f04f 31ff 	mov.w	r1, #4294967295
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff ffe7 	bl	8000b6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b9e:	e7fe      	b.n	8000b9e <_exit+0x12>

08000ba0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	e00a      	b.n	8000bc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bb2:	f3af 8000 	nop.w
 8000bb6:	4601      	mov	r1, r0
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	60ba      	str	r2, [r7, #8]
 8000bbe:	b2ca      	uxtb	r2, r1
 8000bc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697a      	ldr	r2, [r7, #20]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	dbf0      	blt.n	8000bb2 <_read+0x12>
	}

return len;
 8000bd0:	687b      	ldr	r3, [r7, #4]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b086      	sub	sp, #24
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	60f8      	str	r0, [r7, #12]
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	e009      	b.n	8000c00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	1c5a      	adds	r2, r3, #1
 8000bf0:	60ba      	str	r2, [r7, #8]
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dbf1      	blt.n	8000bec <_write+0x12>
	}
	return len;
 8000c08:	687b      	ldr	r3, [r7, #4]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <_close>:

int _close(int file)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
	return -1;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c38:	605a      	str	r2, [r3, #4]
	return 0;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr

08000c46 <_isatty>:

int _isatty(int file)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
	return 1;
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr

08000c5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b085      	sub	sp, #20
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	60f8      	str	r0, [r7, #12]
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
	return 0;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
	...

08000c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c7c:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <_sbrk+0x5c>)
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <_sbrk+0x60>)
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <_sbrk+0x64>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <_sbrk+0x68>)
 8000c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d207      	bcs.n	8000cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca4:	f000 ff36 	bl	8001b14 <__errno>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	220c      	movs	r2, #12
 8000cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	e009      	b.n	8000cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <_sbrk+0x64>)
 8000cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20005000 	.word	0x20005000
 8000cd4:	00000400 	.word	0x00000400
 8000cd8:	2000008c 	.word	0x2000008c
 8000cdc:	200000a8 	.word	0x200000a8

08000ce0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cec:	480c      	ldr	r0, [pc, #48]	; (8000d20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cee:	490d      	ldr	r1, [pc, #52]	; (8000d24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d04:	4c0a      	ldr	r4, [pc, #40]	; (8000d30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d12:	f7ff ffe5 	bl	8000ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d16:	f000 ff03 	bl	8001b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d1a:	f7ff fa17 	bl	800014c <main>
  bx lr
 8000d1e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d28:	08002eb8 	.word	0x08002eb8
  ldr r2, =_sbss
 8000d2c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d30:	200000a4 	.word	0x200000a4

08000d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC1_2_IRQHandler>
	...

08000d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <HAL_Init+0x28>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <HAL_Init+0x28>)
 8000d42:	f043 0310 	orr.w	r3, r3, #16
 8000d46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d48:	2003      	movs	r0, #3
 8000d4a:	f000 f92b 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f000 f808 	bl	8000d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d54:	f7ff feaa 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40022000 	.word	0x40022000

08000d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_InitTick+0x54>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_InitTick+0x58>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4619      	mov	r1, r3
 8000d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 f935 	bl	8000ff2 <HAL_SYSTICK_Config>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00e      	b.n	8000db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b0f      	cmp	r3, #15
 8000d96:	d80a      	bhi.n	8000dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f000 f90b 	bl	8000fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da4:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <HAL_InitTick+0x5c>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e000      	b.n	8000db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	20000004 	.word	0x20000004

08000dc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_IncTick+0x1c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <HAL_IncTick+0x20>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a03      	ldr	r2, [pc, #12]	; (8000de4 <HAL_IncTick+0x20>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000090 	.word	0x20000090

08000de8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b02      	ldr	r3, [pc, #8]	; (8000df8 <HAL_GetTick+0x10>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	20000090 	.word	0x20000090

08000dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff fff0 	bl	8000de8 <HAL_GetTick>
 8000e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e14:	d005      	beq.n	8000e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_Delay+0x44>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4413      	add	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e22:	bf00      	nop
 8000e24:	f7ff ffe0 	bl	8000de8 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d8f7      	bhi.n	8000e24 <HAL_Delay+0x28>
  {
  }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008

08000e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e76:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	60d3      	str	r3, [r2, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	f003 0307 	and.w	r3, r3, #7
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	db0a      	blt.n	8000ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	490c      	ldr	r1, [pc, #48]	; (8000ef4 <__NVIC_SetPriority+0x4c>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	0112      	lsls	r2, r2, #4
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	440b      	add	r3, r1
 8000ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed0:	e00a      	b.n	8000ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4908      	ldr	r1, [pc, #32]	; (8000ef8 <__NVIC_SetPriority+0x50>)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	3b04      	subs	r3, #4
 8000ee0:	0112      	lsls	r2, r2, #4
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	761a      	strb	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	; 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	bf28      	it	cs
 8000f1a:	2304      	movcs	r3, #4
 8000f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3304      	adds	r3, #4
 8000f22:	2b06      	cmp	r3, #6
 8000f24:	d902      	bls.n	8000f2c <NVIC_EncodePriority+0x30>
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3b03      	subs	r3, #3
 8000f2a:	e000      	b.n	8000f2e <NVIC_EncodePriority+0x32>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	f04f 32ff 	mov.w	r2, #4294967295
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f44:	f04f 31ff 	mov.w	r1, #4294967295
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	43d9      	mvns	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	4313      	orrs	r3, r2
         );
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3724      	adds	r7, #36	; 0x24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f70:	d301      	bcc.n	8000f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00f      	b.n	8000f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <SysTick_Config+0x40>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7e:	210f      	movs	r1, #15
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f7ff ff90 	bl	8000ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <SysTick_Config+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <SysTick_Config+0x40>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff49 	bl	8000e44 <__NVIC_SetPriorityGrouping>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fcc:	f7ff ff5e 	bl	8000e8c <__NVIC_GetPriorityGrouping>
 8000fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff ff90 	bl	8000efc <NVIC_EncodePriority>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff5f 	bl	8000ea8 <__NVIC_SetPriority>
}
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ffb0 	bl	8000f60 <SysTick_Config>
 8001000:	4603      	mov	r3, r0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800100c:	b480      	push	{r7}
 800100e:	b08b      	sub	sp, #44	; 0x2c
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101e:	e169      	b.n	80012f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001020:	2201      	movs	r2, #1
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	69fa      	ldr	r2, [r7, #28]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	429a      	cmp	r2, r3
 800103a:	f040 8158 	bne.w	80012ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	4a9a      	ldr	r2, [pc, #616]	; (80012ac <HAL_GPIO_Init+0x2a0>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d05e      	beq.n	8001106 <HAL_GPIO_Init+0xfa>
 8001048:	4a98      	ldr	r2, [pc, #608]	; (80012ac <HAL_GPIO_Init+0x2a0>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d875      	bhi.n	800113a <HAL_GPIO_Init+0x12e>
 800104e:	4a98      	ldr	r2, [pc, #608]	; (80012b0 <HAL_GPIO_Init+0x2a4>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d058      	beq.n	8001106 <HAL_GPIO_Init+0xfa>
 8001054:	4a96      	ldr	r2, [pc, #600]	; (80012b0 <HAL_GPIO_Init+0x2a4>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d86f      	bhi.n	800113a <HAL_GPIO_Init+0x12e>
 800105a:	4a96      	ldr	r2, [pc, #600]	; (80012b4 <HAL_GPIO_Init+0x2a8>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d052      	beq.n	8001106 <HAL_GPIO_Init+0xfa>
 8001060:	4a94      	ldr	r2, [pc, #592]	; (80012b4 <HAL_GPIO_Init+0x2a8>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d869      	bhi.n	800113a <HAL_GPIO_Init+0x12e>
 8001066:	4a94      	ldr	r2, [pc, #592]	; (80012b8 <HAL_GPIO_Init+0x2ac>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d04c      	beq.n	8001106 <HAL_GPIO_Init+0xfa>
 800106c:	4a92      	ldr	r2, [pc, #584]	; (80012b8 <HAL_GPIO_Init+0x2ac>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d863      	bhi.n	800113a <HAL_GPIO_Init+0x12e>
 8001072:	4a92      	ldr	r2, [pc, #584]	; (80012bc <HAL_GPIO_Init+0x2b0>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d046      	beq.n	8001106 <HAL_GPIO_Init+0xfa>
 8001078:	4a90      	ldr	r2, [pc, #576]	; (80012bc <HAL_GPIO_Init+0x2b0>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d85d      	bhi.n	800113a <HAL_GPIO_Init+0x12e>
 800107e:	2b12      	cmp	r3, #18
 8001080:	d82a      	bhi.n	80010d8 <HAL_GPIO_Init+0xcc>
 8001082:	2b12      	cmp	r3, #18
 8001084:	d859      	bhi.n	800113a <HAL_GPIO_Init+0x12e>
 8001086:	a201      	add	r2, pc, #4	; (adr r2, 800108c <HAL_GPIO_Init+0x80>)
 8001088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108c:	08001107 	.word	0x08001107
 8001090:	080010e1 	.word	0x080010e1
 8001094:	080010f3 	.word	0x080010f3
 8001098:	08001135 	.word	0x08001135
 800109c:	0800113b 	.word	0x0800113b
 80010a0:	0800113b 	.word	0x0800113b
 80010a4:	0800113b 	.word	0x0800113b
 80010a8:	0800113b 	.word	0x0800113b
 80010ac:	0800113b 	.word	0x0800113b
 80010b0:	0800113b 	.word	0x0800113b
 80010b4:	0800113b 	.word	0x0800113b
 80010b8:	0800113b 	.word	0x0800113b
 80010bc:	0800113b 	.word	0x0800113b
 80010c0:	0800113b 	.word	0x0800113b
 80010c4:	0800113b 	.word	0x0800113b
 80010c8:	0800113b 	.word	0x0800113b
 80010cc:	0800113b 	.word	0x0800113b
 80010d0:	080010e9 	.word	0x080010e9
 80010d4:	080010fd 	.word	0x080010fd
 80010d8:	4a79      	ldr	r2, [pc, #484]	; (80012c0 <HAL_GPIO_Init+0x2b4>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d013      	beq.n	8001106 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010de:	e02c      	b.n	800113a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	623b      	str	r3, [r7, #32]
          break;
 80010e6:	e029      	b.n	800113c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	3304      	adds	r3, #4
 80010ee:	623b      	str	r3, [r7, #32]
          break;
 80010f0:	e024      	b.n	800113c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	3308      	adds	r3, #8
 80010f8:	623b      	str	r3, [r7, #32]
          break;
 80010fa:	e01f      	b.n	800113c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	330c      	adds	r3, #12
 8001102:	623b      	str	r3, [r7, #32]
          break;
 8001104:	e01a      	b.n	800113c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d102      	bne.n	8001114 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800110e:	2304      	movs	r3, #4
 8001110:	623b      	str	r3, [r7, #32]
          break;
 8001112:	e013      	b.n	800113c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d105      	bne.n	8001128 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800111c:	2308      	movs	r3, #8
 800111e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69fa      	ldr	r2, [r7, #28]
 8001124:	611a      	str	r2, [r3, #16]
          break;
 8001126:	e009      	b.n	800113c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001128:	2308      	movs	r3, #8
 800112a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69fa      	ldr	r2, [r7, #28]
 8001130:	615a      	str	r2, [r3, #20]
          break;
 8001132:	e003      	b.n	800113c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
          break;
 8001138:	e000      	b.n	800113c <HAL_GPIO_Init+0x130>
          break;
 800113a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	2bff      	cmp	r3, #255	; 0xff
 8001140:	d801      	bhi.n	8001146 <HAL_GPIO_Init+0x13a>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	e001      	b.n	800114a <HAL_GPIO_Init+0x13e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3304      	adds	r3, #4
 800114a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	2bff      	cmp	r3, #255	; 0xff
 8001150:	d802      	bhi.n	8001158 <HAL_GPIO_Init+0x14c>
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	e002      	b.n	800115e <HAL_GPIO_Init+0x152>
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	3b08      	subs	r3, #8
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	210f      	movs	r1, #15
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	fa01 f303 	lsl.w	r3, r1, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	401a      	ands	r2, r3
 8001170:	6a39      	ldr	r1, [r7, #32]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	fa01 f303 	lsl.w	r3, r1, r3
 8001178:	431a      	orrs	r2, r3
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 80b1 	beq.w	80012ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800118c:	4b4d      	ldr	r3, [pc, #308]	; (80012c4 <HAL_GPIO_Init+0x2b8>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a4c      	ldr	r2, [pc, #304]	; (80012c4 <HAL_GPIO_Init+0x2b8>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b4a      	ldr	r3, [pc, #296]	; (80012c4 <HAL_GPIO_Init+0x2b8>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011a4:	4a48      	ldr	r2, [pc, #288]	; (80012c8 <HAL_GPIO_Init+0x2bc>)
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	4013      	ands	r3, r2
 80011c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a40      	ldr	r2, [pc, #256]	; (80012cc <HAL_GPIO_Init+0x2c0>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d013      	beq.n	80011f8 <HAL_GPIO_Init+0x1ec>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a3f      	ldr	r2, [pc, #252]	; (80012d0 <HAL_GPIO_Init+0x2c4>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d00d      	beq.n	80011f4 <HAL_GPIO_Init+0x1e8>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a3e      	ldr	r2, [pc, #248]	; (80012d4 <HAL_GPIO_Init+0x2c8>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d007      	beq.n	80011f0 <HAL_GPIO_Init+0x1e4>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a3d      	ldr	r2, [pc, #244]	; (80012d8 <HAL_GPIO_Init+0x2cc>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d101      	bne.n	80011ec <HAL_GPIO_Init+0x1e0>
 80011e8:	2303      	movs	r3, #3
 80011ea:	e006      	b.n	80011fa <HAL_GPIO_Init+0x1ee>
 80011ec:	2304      	movs	r3, #4
 80011ee:	e004      	b.n	80011fa <HAL_GPIO_Init+0x1ee>
 80011f0:	2302      	movs	r3, #2
 80011f2:	e002      	b.n	80011fa <HAL_GPIO_Init+0x1ee>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <HAL_GPIO_Init+0x1ee>
 80011f8:	2300      	movs	r3, #0
 80011fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011fc:	f002 0203 	and.w	r2, r2, #3
 8001200:	0092      	lsls	r2, r2, #2
 8001202:	4093      	lsls	r3, r2
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	4313      	orrs	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800120a:	492f      	ldr	r1, [pc, #188]	; (80012c8 <HAL_GPIO_Init+0x2bc>)
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	3302      	adds	r3, #2
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d006      	beq.n	8001232 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001224:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	492c      	ldr	r1, [pc, #176]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	600b      	str	r3, [r1, #0]
 8001230:	e006      	b.n	8001240 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001232:	4b2a      	ldr	r3, [pc, #168]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	43db      	mvns	r3, r3
 800123a:	4928      	ldr	r1, [pc, #160]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 800123c:	4013      	ands	r3, r2
 800123e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800124c:	4b23      	ldr	r3, [pc, #140]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	4922      	ldr	r1, [pc, #136]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	604b      	str	r3, [r1, #4]
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	43db      	mvns	r3, r3
 8001262:	491e      	ldr	r1, [pc, #120]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 8001264:	4013      	ands	r3, r2
 8001266:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d006      	beq.n	8001282 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001274:	4b19      	ldr	r3, [pc, #100]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	4918      	ldr	r1, [pc, #96]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	608b      	str	r3, [r1, #8]
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	43db      	mvns	r3, r3
 800128a:	4914      	ldr	r1, [pc, #80]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 800128c:	4013      	ands	r3, r2
 800128e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d021      	beq.n	80012e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 800129e:	68da      	ldr	r2, [r3, #12]
 80012a0:	490e      	ldr	r1, [pc, #56]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	60cb      	str	r3, [r1, #12]
 80012a8:	e021      	b.n	80012ee <HAL_GPIO_Init+0x2e2>
 80012aa:	bf00      	nop
 80012ac:	10320000 	.word	0x10320000
 80012b0:	10310000 	.word	0x10310000
 80012b4:	10220000 	.word	0x10220000
 80012b8:	10210000 	.word	0x10210000
 80012bc:	10120000 	.word	0x10120000
 80012c0:	10110000 	.word	0x10110000
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40010000 	.word	0x40010000
 80012cc:	40010800 	.word	0x40010800
 80012d0:	40010c00 	.word	0x40010c00
 80012d4:	40011000 	.word	0x40011000
 80012d8:	40011400 	.word	0x40011400
 80012dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <HAL_GPIO_Init+0x304>)
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	4909      	ldr	r1, [pc, #36]	; (8001310 <HAL_GPIO_Init+0x304>)
 80012ea:	4013      	ands	r3, r2
 80012ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	3301      	adds	r3, #1
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	fa22 f303 	lsr.w	r3, r2, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f47f ae8e 	bne.w	8001020 <HAL_GPIO_Init+0x14>
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	372c      	adds	r7, #44	; 0x2c
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	40010400 	.word	0x40010400

08001314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	807b      	strh	r3, [r7, #2]
 8001320:	4613      	mov	r3, r2
 8001322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001324:	787b      	ldrb	r3, [r7, #1]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800132a:	887a      	ldrh	r2, [r7, #2]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001330:	e003      	b.n	800133a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001332:	887b      	ldrh	r3, [r7, #2]
 8001334:	041a      	lsls	r2, r3, #16
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	611a      	str	r2, [r3, #16]
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e272      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 8087 	beq.w	8001472 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001364:	4b92      	ldr	r3, [pc, #584]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 030c 	and.w	r3, r3, #12
 800136c:	2b04      	cmp	r3, #4
 800136e:	d00c      	beq.n	800138a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001370:	4b8f      	ldr	r3, [pc, #572]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 030c 	and.w	r3, r3, #12
 8001378:	2b08      	cmp	r3, #8
 800137a:	d112      	bne.n	80013a2 <HAL_RCC_OscConfig+0x5e>
 800137c:	4b8c      	ldr	r3, [pc, #560]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001388:	d10b      	bne.n	80013a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138a:	4b89      	ldr	r3, [pc, #548]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d06c      	beq.n	8001470 <HAL_RCC_OscConfig+0x12c>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d168      	bne.n	8001470 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e24c      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013aa:	d106      	bne.n	80013ba <HAL_RCC_OscConfig+0x76>
 80013ac:	4b80      	ldr	r3, [pc, #512]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a7f      	ldr	r2, [pc, #508]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	e02e      	b.n	8001418 <HAL_RCC_OscConfig+0xd4>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10c      	bne.n	80013dc <HAL_RCC_OscConfig+0x98>
 80013c2:	4b7b      	ldr	r3, [pc, #492]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a7a      	ldr	r2, [pc, #488]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	4b78      	ldr	r3, [pc, #480]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a77      	ldr	r2, [pc, #476]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e01d      	b.n	8001418 <HAL_RCC_OscConfig+0xd4>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0xbc>
 80013e6:	4b72      	ldr	r3, [pc, #456]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a71      	ldr	r2, [pc, #452]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b6f      	ldr	r3, [pc, #444]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a6e      	ldr	r2, [pc, #440]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e00b      	b.n	8001418 <HAL_RCC_OscConfig+0xd4>
 8001400:	4b6b      	ldr	r3, [pc, #428]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a6a      	ldr	r2, [pc, #424]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	4b68      	ldr	r3, [pc, #416]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a67      	ldr	r2, [pc, #412]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001416:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d013      	beq.n	8001448 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fce2 	bl	8000de8 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fcde 	bl	8000de8 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	; 0x64
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e200      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143a:	4b5d      	ldr	r3, [pc, #372]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0xe4>
 8001446:	e014      	b.n	8001472 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001448:	f7ff fcce 	bl	8000de8 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001450:	f7ff fcca 	bl	8000de8 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	; 0x64
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e1ec      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001462:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x10c>
 800146e:	e000      	b.n	8001472 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d063      	beq.n	8001546 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800147e:	4b4c      	ldr	r3, [pc, #304]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00b      	beq.n	80014a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800148a:	4b49      	ldr	r3, [pc, #292]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b08      	cmp	r3, #8
 8001494:	d11c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x18c>
 8001496:	4b46      	ldr	r3, [pc, #280]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d116      	bne.n	80014d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a2:	4b43      	ldr	r3, [pc, #268]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d005      	beq.n	80014ba <HAL_RCC_OscConfig+0x176>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d001      	beq.n	80014ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e1c0      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ba:	4b3d      	ldr	r3, [pc, #244]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	4939      	ldr	r1, [pc, #228]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ce:	e03a      	b.n	8001546 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d020      	beq.n	800151a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d8:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80014da:	2201      	movs	r2, #1
 80014dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014de:	f7ff fc83 	bl	8000de8 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e6:	f7ff fc7f 	bl	8000de8 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e1a1      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f8:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001504:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4927      	ldr	r1, [pc, #156]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001514:	4313      	orrs	r3, r2
 8001516:	600b      	str	r3, [r1, #0]
 8001518:	e015      	b.n	8001546 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800151a:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fc62 	bl	8000de8 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001528:	f7ff fc5e 	bl	8000de8 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e180      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153a:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d03a      	beq.n	80015c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d019      	beq.n	800158e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_RCC_OscConfig+0x274>)
 800155c:	2201      	movs	r2, #1
 800155e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001560:	f7ff fc42 	bl	8000de8 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001568:	f7ff fc3e 	bl	8000de8 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e160      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001586:	2001      	movs	r0, #1
 8001588:	f000 faa6 	bl	8001ad8 <RCC_Delay>
 800158c:	e01c      	b.n	80015c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_RCC_OscConfig+0x274>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001594:	f7ff fc28 	bl	8000de8 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800159a:	e00f      	b.n	80015bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800159c:	f7ff fc24 	bl	8000de8 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d908      	bls.n	80015bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e146      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000
 80015b4:	42420000 	.word	0x42420000
 80015b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015bc:	4b92      	ldr	r3, [pc, #584]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1e9      	bne.n	800159c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 80a6 	beq.w	8001722 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015da:	4b8b      	ldr	r3, [pc, #556]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10d      	bne.n	8001602 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	4b88      	ldr	r3, [pc, #544]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	4a87      	ldr	r2, [pc, #540]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f0:	61d3      	str	r3, [r2, #28]
 80015f2:	4b85      	ldr	r3, [pc, #532]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015fe:	2301      	movs	r3, #1
 8001600:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001602:	4b82      	ldr	r3, [pc, #520]	; (800180c <HAL_RCC_OscConfig+0x4c8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160a:	2b00      	cmp	r3, #0
 800160c:	d118      	bne.n	8001640 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800160e:	4b7f      	ldr	r3, [pc, #508]	; (800180c <HAL_RCC_OscConfig+0x4c8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a7e      	ldr	r2, [pc, #504]	; (800180c <HAL_RCC_OscConfig+0x4c8>)
 8001614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800161a:	f7ff fbe5 	bl	8000de8 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001622:	f7ff fbe1 	bl	8000de8 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b64      	cmp	r3, #100	; 0x64
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e103      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001634:	4b75      	ldr	r3, [pc, #468]	; (800180c <HAL_RCC_OscConfig+0x4c8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d106      	bne.n	8001656 <HAL_RCC_OscConfig+0x312>
 8001648:	4b6f      	ldr	r3, [pc, #444]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	4a6e      	ldr	r2, [pc, #440]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6213      	str	r3, [r2, #32]
 8001654:	e02d      	b.n	80016b2 <HAL_RCC_OscConfig+0x36e>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0x334>
 800165e:	4b6a      	ldr	r3, [pc, #424]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	4a69      	ldr	r2, [pc, #420]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001664:	f023 0301 	bic.w	r3, r3, #1
 8001668:	6213      	str	r3, [r2, #32]
 800166a:	4b67      	ldr	r3, [pc, #412]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	4a66      	ldr	r2, [pc, #408]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001670:	f023 0304 	bic.w	r3, r3, #4
 8001674:	6213      	str	r3, [r2, #32]
 8001676:	e01c      	b.n	80016b2 <HAL_RCC_OscConfig+0x36e>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	2b05      	cmp	r3, #5
 800167e:	d10c      	bne.n	800169a <HAL_RCC_OscConfig+0x356>
 8001680:	4b61      	ldr	r3, [pc, #388]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	4a60      	ldr	r2, [pc, #384]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001686:	f043 0304 	orr.w	r3, r3, #4
 800168a:	6213      	str	r3, [r2, #32]
 800168c:	4b5e      	ldr	r3, [pc, #376]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	4a5d      	ldr	r2, [pc, #372]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6213      	str	r3, [r2, #32]
 8001698:	e00b      	b.n	80016b2 <HAL_RCC_OscConfig+0x36e>
 800169a:	4b5b      	ldr	r3, [pc, #364]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4a5a      	ldr	r2, [pc, #360]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	6213      	str	r3, [r2, #32]
 80016a6:	4b58      	ldr	r3, [pc, #352]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4a57      	ldr	r2, [pc, #348]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	f023 0304 	bic.w	r3, r3, #4
 80016b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d015      	beq.n	80016e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ba:	f7ff fb95 	bl	8000de8 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff fb91 	bl	8000de8 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e0b1      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d8:	4b4b      	ldr	r3, [pc, #300]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0ee      	beq.n	80016c2 <HAL_RCC_OscConfig+0x37e>
 80016e4:	e014      	b.n	8001710 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e6:	f7ff fb7f 	bl	8000de8 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ec:	e00a      	b.n	8001704 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f7ff fb7b 	bl	8000de8 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e09b      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001704:	4b40      	ldr	r3, [pc, #256]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1ee      	bne.n	80016ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d105      	bne.n	8001722 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001716:	4b3c      	ldr	r3, [pc, #240]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	4a3b      	ldr	r2, [pc, #236]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001720:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 8087 	beq.w	800183a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800172c:	4b36      	ldr	r3, [pc, #216]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 030c 	and.w	r3, r3, #12
 8001734:	2b08      	cmp	r3, #8
 8001736:	d061      	beq.n	80017fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	2b02      	cmp	r3, #2
 800173e:	d146      	bne.n	80017ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001740:	4b33      	ldr	r3, [pc, #204]	; (8001810 <HAL_RCC_OscConfig+0x4cc>)
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001746:	f7ff fb4f 	bl	8000de8 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174e:	f7ff fb4b 	bl	8000de8 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e06d      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f0      	bne.n	800174e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001774:	d108      	bne.n	8001788 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001776:	4b24      	ldr	r3, [pc, #144]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	4921      	ldr	r1, [pc, #132]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001788:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a19      	ldr	r1, [r3, #32]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001798:	430b      	orrs	r3, r1
 800179a:	491b      	ldr	r1, [pc, #108]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800179c:	4313      	orrs	r3, r2
 800179e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <HAL_RCC_OscConfig+0x4cc>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a6:	f7ff fb1f 	bl	8000de8 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ae:	f7ff fb1b 	bl	8000de8 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e03d      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f0      	beq.n	80017ae <HAL_RCC_OscConfig+0x46a>
 80017cc:	e035      	b.n	800183a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <HAL_RCC_OscConfig+0x4cc>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff fb08 	bl	8000de8 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017dc:	f7ff fb04 	bl	8000de8 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e026      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x498>
 80017fa:	e01e      	b.n	800183a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d107      	bne.n	8001814 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e019      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
 8001808:	40021000 	.word	0x40021000
 800180c:	40007000 	.word	0x40007000
 8001810:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_RCC_OscConfig+0x500>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	429a      	cmp	r2, r3
 8001826:	d106      	bne.n	8001836 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001832:	429a      	cmp	r2, r3
 8001834:	d001      	beq.n	800183a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40021000 	.word	0x40021000

08001848 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0d0      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800185c:	4b6a      	ldr	r3, [pc, #424]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d910      	bls.n	800188c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186a:	4b67      	ldr	r3, [pc, #412]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 0207 	bic.w	r2, r3, #7
 8001872:	4965      	ldr	r1, [pc, #404]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	4313      	orrs	r3, r2
 8001878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800187a:	4b63      	ldr	r3, [pc, #396]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0b8      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d020      	beq.n	80018da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d005      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018a4:	4b59      	ldr	r3, [pc, #356]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	4a58      	ldr	r2, [pc, #352]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018bc:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	4a52      	ldr	r2, [pc, #328]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c8:	4b50      	ldr	r3, [pc, #320]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	494d      	ldr	r1, [pc, #308]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d040      	beq.n	8001968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d107      	bne.n	80018fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	4b47      	ldr	r3, [pc, #284]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d115      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e07f      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001906:	4b41      	ldr	r3, [pc, #260]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d109      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e073      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001916:	4b3d      	ldr	r3, [pc, #244]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e06b      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001926:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f023 0203 	bic.w	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4936      	ldr	r1, [pc, #216]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001938:	f7ff fa56 	bl	8000de8 <HAL_GetTick>
 800193c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193e:	e00a      	b.n	8001956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001940:	f7ff fa52 	bl	8000de8 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	; 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e053      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001956:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 020c 	and.w	r2, r3, #12
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	429a      	cmp	r2, r3
 8001966:	d1eb      	bne.n	8001940 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001968:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d210      	bcs.n	8001998 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 0207 	bic.w	r2, r3, #7
 800197e:	4922      	ldr	r1, [pc, #136]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	4313      	orrs	r3, r2
 8001984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001986:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d001      	beq.n	8001998 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e032      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d008      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a4:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4916      	ldr	r1, [pc, #88]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d009      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	490e      	ldr	r1, [pc, #56]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019d6:	f000 f821 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 80019da:	4602      	mov	r2, r0
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	091b      	lsrs	r3, r3, #4
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	490a      	ldr	r1, [pc, #40]	; (8001a10 <HAL_RCC_ClockConfig+0x1c8>)
 80019e8:	5ccb      	ldrb	r3, [r1, r3]
 80019ea:	fa22 f303 	lsr.w	r3, r2, r3
 80019ee:	4a09      	ldr	r2, [pc, #36]	; (8001a14 <HAL_RCC_ClockConfig+0x1cc>)
 80019f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_RCC_ClockConfig+0x1d0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff f9b4 	bl	8000d64 <HAL_InitTick>

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40022000 	.word	0x40022000
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	08002d58 	.word	0x08002d58
 8001a14:	20000000 	.word	0x20000000
 8001a18:	20000004 	.word	0x20000004

08001a1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a1c:	b490      	push	{r4, r7}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a22:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001a24:	1d3c      	adds	r4, r7, #4
 8001a26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a2c:	f240 2301 	movw	r3, #513	; 0x201
 8001a30:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a46:	4b21      	ldr	r3, [pc, #132]	; (8001acc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d002      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0x40>
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	d003      	beq.n	8001a62 <HAL_RCC_GetSysClockFreq+0x46>
 8001a5a:	e02b      	b.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a5c:	4b1c      	ldr	r3, [pc, #112]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a5e:	623b      	str	r3, [r7, #32]
      break;
 8001a60:	e02b      	b.n	8001aba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	0c9b      	lsrs	r3, r3, #18
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	3328      	adds	r3, #40	; 0x28
 8001a6c:	443b      	add	r3, r7
 8001a6e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a72:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d012      	beq.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a7e:	4b13      	ldr	r3, [pc, #76]	; (8001acc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	0c5b      	lsrs	r3, r3, #17
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	3328      	adds	r3, #40	; 0x28
 8001a8a:	443b      	add	r3, r7
 8001a8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a90:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a96:	fb03 f202 	mul.w	r2, r3, r2
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa2:	e004      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aa8:	fb02 f303 	mul.w	r3, r2, r3
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	623b      	str	r3, [r7, #32]
      break;
 8001ab2:	e002      	b.n	8001aba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ab6:	623b      	str	r3, [r7, #32]
      break;
 8001ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aba:	6a3b      	ldr	r3, [r7, #32]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3728      	adds	r7, #40	; 0x28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc90      	pop	{r4, r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	08002d48 	.word	0x08002d48
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	007a1200 	.word	0x007a1200
 8001ad4:	003d0900 	.word	0x003d0900

08001ad8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <RCC_Delay+0x34>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <RCC_Delay+0x38>)
 8001ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aea:	0a5b      	lsrs	r3, r3, #9
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	fb02 f303 	mul.w	r3, r2, r3
 8001af2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001af4:	bf00      	nop
  }
  while (Delay --);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1e5a      	subs	r2, r3, #1
 8001afa:	60fa      	str	r2, [r7, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f9      	bne.n	8001af4 <RCC_Delay+0x1c>
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	10624dd3 	.word	0x10624dd3

08001b14 <__errno>:
 8001b14:	4b01      	ldr	r3, [pc, #4]	; (8001b1c <__errno+0x8>)
 8001b16:	6818      	ldr	r0, [r3, #0]
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	2000000c 	.word	0x2000000c

08001b20 <__libc_init_array>:
 8001b20:	b570      	push	{r4, r5, r6, lr}
 8001b22:	2600      	movs	r6, #0
 8001b24:	4d0c      	ldr	r5, [pc, #48]	; (8001b58 <__libc_init_array+0x38>)
 8001b26:	4c0d      	ldr	r4, [pc, #52]	; (8001b5c <__libc_init_array+0x3c>)
 8001b28:	1b64      	subs	r4, r4, r5
 8001b2a:	10a4      	asrs	r4, r4, #2
 8001b2c:	42a6      	cmp	r6, r4
 8001b2e:	d109      	bne.n	8001b44 <__libc_init_array+0x24>
 8001b30:	f001 f886 	bl	8002c40 <_init>
 8001b34:	2600      	movs	r6, #0
 8001b36:	4d0a      	ldr	r5, [pc, #40]	; (8001b60 <__libc_init_array+0x40>)
 8001b38:	4c0a      	ldr	r4, [pc, #40]	; (8001b64 <__libc_init_array+0x44>)
 8001b3a:	1b64      	subs	r4, r4, r5
 8001b3c:	10a4      	asrs	r4, r4, #2
 8001b3e:	42a6      	cmp	r6, r4
 8001b40:	d105      	bne.n	8001b4e <__libc_init_array+0x2e>
 8001b42:	bd70      	pop	{r4, r5, r6, pc}
 8001b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b48:	4798      	blx	r3
 8001b4a:	3601      	adds	r6, #1
 8001b4c:	e7ee      	b.n	8001b2c <__libc_init_array+0xc>
 8001b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b52:	4798      	blx	r3
 8001b54:	3601      	adds	r6, #1
 8001b56:	e7f2      	b.n	8001b3e <__libc_init_array+0x1e>
 8001b58:	08002eb0 	.word	0x08002eb0
 8001b5c:	08002eb0 	.word	0x08002eb0
 8001b60:	08002eb0 	.word	0x08002eb0
 8001b64:	08002eb4 	.word	0x08002eb4

08001b68 <memcpy>:
 8001b68:	440a      	add	r2, r1
 8001b6a:	4291      	cmp	r1, r2
 8001b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001b70:	d100      	bne.n	8001b74 <memcpy+0xc>
 8001b72:	4770      	bx	lr
 8001b74:	b510      	push	{r4, lr}
 8001b76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001b7a:	4291      	cmp	r1, r2
 8001b7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001b80:	d1f9      	bne.n	8001b76 <memcpy+0xe>
 8001b82:	bd10      	pop	{r4, pc}

08001b84 <memset>:
 8001b84:	4603      	mov	r3, r0
 8001b86:	4402      	add	r2, r0
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d100      	bne.n	8001b8e <memset+0xa>
 8001b8c:	4770      	bx	lr
 8001b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8001b92:	e7f9      	b.n	8001b88 <memset+0x4>

08001b94 <iprintf>:
 8001b94:	b40f      	push	{r0, r1, r2, r3}
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <iprintf+0x2c>)
 8001b98:	b513      	push	{r0, r1, r4, lr}
 8001b9a:	681c      	ldr	r4, [r3, #0]
 8001b9c:	b124      	cbz	r4, 8001ba8 <iprintf+0x14>
 8001b9e:	69a3      	ldr	r3, [r4, #24]
 8001ba0:	b913      	cbnz	r3, 8001ba8 <iprintf+0x14>
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	f000 f8c2 	bl	8001d2c <__sinit>
 8001ba8:	ab05      	add	r3, sp, #20
 8001baa:	4620      	mov	r0, r4
 8001bac:	9a04      	ldr	r2, [sp, #16]
 8001bae:	68a1      	ldr	r1, [r4, #8]
 8001bb0:	9301      	str	r3, [sp, #4]
 8001bb2:	f000 fa79 	bl	80020a8 <_vfiprintf_r>
 8001bb6:	b002      	add	sp, #8
 8001bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bbc:	b004      	add	sp, #16
 8001bbe:	4770      	bx	lr
 8001bc0:	2000000c 	.word	0x2000000c

08001bc4 <rand>:
 8001bc4:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <rand+0x5c>)
 8001bc6:	b510      	push	{r4, lr}
 8001bc8:	681c      	ldr	r4, [r3, #0]
 8001bca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bcc:	b9b3      	cbnz	r3, 8001bfc <rand+0x38>
 8001bce:	2018      	movs	r0, #24
 8001bd0:	f000 f95e 	bl	8001e90 <malloc>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	63a0      	str	r0, [r4, #56]	; 0x38
 8001bd8:	b920      	cbnz	r0, 8001be4 <rand+0x20>
 8001bda:	214e      	movs	r1, #78	; 0x4e
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <rand+0x60>)
 8001bde:	4812      	ldr	r0, [pc, #72]	; (8001c28 <rand+0x64>)
 8001be0:	f000 f82e 	bl	8001c40 <__assert_func>
 8001be4:	4911      	ldr	r1, [pc, #68]	; (8001c2c <rand+0x68>)
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <rand+0x6c>)
 8001be8:	e9c0 1300 	strd	r1, r3, [r0]
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <rand+0x70>)
 8001bee:	2100      	movs	r1, #0
 8001bf0:	6083      	str	r3, [r0, #8]
 8001bf2:	230b      	movs	r3, #11
 8001bf4:	8183      	strh	r3, [r0, #12]
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001bfc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8001bfe:	4a0e      	ldr	r2, [pc, #56]	; (8001c38 <rand+0x74>)
 8001c00:	6920      	ldr	r0, [r4, #16]
 8001c02:	6963      	ldr	r3, [r4, #20]
 8001c04:	4342      	muls	r2, r0
 8001c06:	490d      	ldr	r1, [pc, #52]	; (8001c3c <rand+0x78>)
 8001c08:	fb01 2203 	mla	r2, r1, r3, r2
 8001c0c:	fba0 0101 	umull	r0, r1, r0, r1
 8001c10:	1c43      	adds	r3, r0, #1
 8001c12:	eb42 0001 	adc.w	r0, r2, r1
 8001c16:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8001c1a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001c1e:	bd10      	pop	{r4, pc}
 8001c20:	2000000c 	.word	0x2000000c
 8001c24:	08002d6c 	.word	0x08002d6c
 8001c28:	08002d83 	.word	0x08002d83
 8001c2c:	abcd330e 	.word	0xabcd330e
 8001c30:	e66d1234 	.word	0xe66d1234
 8001c34:	0005deec 	.word	0x0005deec
 8001c38:	5851f42d 	.word	0x5851f42d
 8001c3c:	4c957f2d 	.word	0x4c957f2d

08001c40 <__assert_func>:
 8001c40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001c42:	4614      	mov	r4, r2
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <__assert_func+0x2c>)
 8001c48:	4605      	mov	r5, r0
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68d8      	ldr	r0, [r3, #12]
 8001c4e:	b14c      	cbz	r4, 8001c64 <__assert_func+0x24>
 8001c50:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <__assert_func+0x30>)
 8001c52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001c56:	9100      	str	r1, [sp, #0]
 8001c58:	462b      	mov	r3, r5
 8001c5a:	4906      	ldr	r1, [pc, #24]	; (8001c74 <__assert_func+0x34>)
 8001c5c:	f000 f8e4 	bl	8001e28 <fiprintf>
 8001c60:	f000 fe0e 	bl	8002880 <abort>
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <__assert_func+0x38>)
 8001c66:	461c      	mov	r4, r3
 8001c68:	e7f3      	b.n	8001c52 <__assert_func+0x12>
 8001c6a:	bf00      	nop
 8001c6c:	2000000c 	.word	0x2000000c
 8001c70:	08002dde 	.word	0x08002dde
 8001c74:	08002deb 	.word	0x08002deb
 8001c78:	08002e19 	.word	0x08002e19

08001c7c <std>:
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	b510      	push	{r4, lr}
 8001c80:	4604      	mov	r4, r0
 8001c82:	e9c0 3300 	strd	r3, r3, [r0]
 8001c86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001c8a:	6083      	str	r3, [r0, #8]
 8001c8c:	8181      	strh	r1, [r0, #12]
 8001c8e:	6643      	str	r3, [r0, #100]	; 0x64
 8001c90:	81c2      	strh	r2, [r0, #14]
 8001c92:	6183      	str	r3, [r0, #24]
 8001c94:	4619      	mov	r1, r3
 8001c96:	2208      	movs	r2, #8
 8001c98:	305c      	adds	r0, #92	; 0x5c
 8001c9a:	f7ff ff73 	bl	8001b84 <memset>
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <std+0x38>)
 8001ca0:	6224      	str	r4, [r4, #32]
 8001ca2:	6263      	str	r3, [r4, #36]	; 0x24
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <std+0x3c>)
 8001ca6:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ca8:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <std+0x40>)
 8001caa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <std+0x44>)
 8001cae:	6323      	str	r3, [r4, #48]	; 0x30
 8001cb0:	bd10      	pop	{r4, pc}
 8001cb2:	bf00      	nop
 8001cb4:	08002655 	.word	0x08002655
 8001cb8:	08002677 	.word	0x08002677
 8001cbc:	080026af 	.word	0x080026af
 8001cc0:	080026d3 	.word	0x080026d3

08001cc4 <_cleanup_r>:
 8001cc4:	4901      	ldr	r1, [pc, #4]	; (8001ccc <_cleanup_r+0x8>)
 8001cc6:	f000 b8c1 	b.w	8001e4c <_fwalk_reent>
 8001cca:	bf00      	nop
 8001ccc:	080029b5 	.word	0x080029b5

08001cd0 <__sfmoreglue>:
 8001cd0:	2268      	movs	r2, #104	; 0x68
 8001cd2:	b570      	push	{r4, r5, r6, lr}
 8001cd4:	1e4d      	subs	r5, r1, #1
 8001cd6:	4355      	muls	r5, r2
 8001cd8:	460e      	mov	r6, r1
 8001cda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001cde:	f000 f947 	bl	8001f70 <_malloc_r>
 8001ce2:	4604      	mov	r4, r0
 8001ce4:	b140      	cbz	r0, 8001cf8 <__sfmoreglue+0x28>
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	e9c0 1600 	strd	r1, r6, [r0]
 8001cec:	300c      	adds	r0, #12
 8001cee:	60a0      	str	r0, [r4, #8]
 8001cf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001cf4:	f7ff ff46 	bl	8001b84 <memset>
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	bd70      	pop	{r4, r5, r6, pc}

08001cfc <__sfp_lock_acquire>:
 8001cfc:	4801      	ldr	r0, [pc, #4]	; (8001d04 <__sfp_lock_acquire+0x8>)
 8001cfe:	f000 b8c5 	b.w	8001e8c <__retarget_lock_acquire_recursive>
 8001d02:	bf00      	nop
 8001d04:	20000095 	.word	0x20000095

08001d08 <__sfp_lock_release>:
 8001d08:	4801      	ldr	r0, [pc, #4]	; (8001d10 <__sfp_lock_release+0x8>)
 8001d0a:	f000 b8c0 	b.w	8001e8e <__retarget_lock_release_recursive>
 8001d0e:	bf00      	nop
 8001d10:	20000095 	.word	0x20000095

08001d14 <__sinit_lock_acquire>:
 8001d14:	4801      	ldr	r0, [pc, #4]	; (8001d1c <__sinit_lock_acquire+0x8>)
 8001d16:	f000 b8b9 	b.w	8001e8c <__retarget_lock_acquire_recursive>
 8001d1a:	bf00      	nop
 8001d1c:	20000096 	.word	0x20000096

08001d20 <__sinit_lock_release>:
 8001d20:	4801      	ldr	r0, [pc, #4]	; (8001d28 <__sinit_lock_release+0x8>)
 8001d22:	f000 b8b4 	b.w	8001e8e <__retarget_lock_release_recursive>
 8001d26:	bf00      	nop
 8001d28:	20000096 	.word	0x20000096

08001d2c <__sinit>:
 8001d2c:	b510      	push	{r4, lr}
 8001d2e:	4604      	mov	r4, r0
 8001d30:	f7ff fff0 	bl	8001d14 <__sinit_lock_acquire>
 8001d34:	69a3      	ldr	r3, [r4, #24]
 8001d36:	b11b      	cbz	r3, 8001d40 <__sinit+0x14>
 8001d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d3c:	f7ff bff0 	b.w	8001d20 <__sinit_lock_release>
 8001d40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001d44:	6523      	str	r3, [r4, #80]	; 0x50
 8001d46:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <__sinit+0x68>)
 8001d48:	4a13      	ldr	r2, [pc, #76]	; (8001d98 <__sinit+0x6c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8001d4e:	42a3      	cmp	r3, r4
 8001d50:	bf08      	it	eq
 8001d52:	2301      	moveq	r3, #1
 8001d54:	4620      	mov	r0, r4
 8001d56:	bf08      	it	eq
 8001d58:	61a3      	streq	r3, [r4, #24]
 8001d5a:	f000 f81f 	bl	8001d9c <__sfp>
 8001d5e:	6060      	str	r0, [r4, #4]
 8001d60:	4620      	mov	r0, r4
 8001d62:	f000 f81b 	bl	8001d9c <__sfp>
 8001d66:	60a0      	str	r0, [r4, #8]
 8001d68:	4620      	mov	r0, r4
 8001d6a:	f000 f817 	bl	8001d9c <__sfp>
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2104      	movs	r1, #4
 8001d72:	60e0      	str	r0, [r4, #12]
 8001d74:	6860      	ldr	r0, [r4, #4]
 8001d76:	f7ff ff81 	bl	8001c7c <std>
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	2109      	movs	r1, #9
 8001d7e:	68a0      	ldr	r0, [r4, #8]
 8001d80:	f7ff ff7c 	bl	8001c7c <std>
 8001d84:	2202      	movs	r2, #2
 8001d86:	2112      	movs	r1, #18
 8001d88:	68e0      	ldr	r0, [r4, #12]
 8001d8a:	f7ff ff77 	bl	8001c7c <std>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	61a3      	str	r3, [r4, #24]
 8001d92:	e7d1      	b.n	8001d38 <__sinit+0xc>
 8001d94:	08002d68 	.word	0x08002d68
 8001d98:	08001cc5 	.word	0x08001cc5

08001d9c <__sfp>:
 8001d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d9e:	4607      	mov	r7, r0
 8001da0:	f7ff ffac 	bl	8001cfc <__sfp_lock_acquire>
 8001da4:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <__sfp+0x84>)
 8001da6:	681e      	ldr	r6, [r3, #0]
 8001da8:	69b3      	ldr	r3, [r6, #24]
 8001daa:	b913      	cbnz	r3, 8001db2 <__sfp+0x16>
 8001dac:	4630      	mov	r0, r6
 8001dae:	f7ff ffbd 	bl	8001d2c <__sinit>
 8001db2:	3648      	adds	r6, #72	; 0x48
 8001db4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	d503      	bpl.n	8001dc4 <__sfp+0x28>
 8001dbc:	6833      	ldr	r3, [r6, #0]
 8001dbe:	b30b      	cbz	r3, 8001e04 <__sfp+0x68>
 8001dc0:	6836      	ldr	r6, [r6, #0]
 8001dc2:	e7f7      	b.n	8001db4 <__sfp+0x18>
 8001dc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001dc8:	b9d5      	cbnz	r5, 8001e00 <__sfp+0x64>
 8001dca:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <__sfp+0x88>)
 8001dcc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001dd0:	60e3      	str	r3, [r4, #12]
 8001dd2:	6665      	str	r5, [r4, #100]	; 0x64
 8001dd4:	f000 f859 	bl	8001e8a <__retarget_lock_init_recursive>
 8001dd8:	f7ff ff96 	bl	8001d08 <__sfp_lock_release>
 8001ddc:	2208      	movs	r2, #8
 8001dde:	4629      	mov	r1, r5
 8001de0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001de4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001de8:	6025      	str	r5, [r4, #0]
 8001dea:	61a5      	str	r5, [r4, #24]
 8001dec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001df0:	f7ff fec8 	bl	8001b84 <memset>
 8001df4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001df8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e00:	3468      	adds	r4, #104	; 0x68
 8001e02:	e7d9      	b.n	8001db8 <__sfp+0x1c>
 8001e04:	2104      	movs	r1, #4
 8001e06:	4638      	mov	r0, r7
 8001e08:	f7ff ff62 	bl	8001cd0 <__sfmoreglue>
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	6030      	str	r0, [r6, #0]
 8001e10:	2800      	cmp	r0, #0
 8001e12:	d1d5      	bne.n	8001dc0 <__sfp+0x24>
 8001e14:	f7ff ff78 	bl	8001d08 <__sfp_lock_release>
 8001e18:	230c      	movs	r3, #12
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	e7ee      	b.n	8001dfc <__sfp+0x60>
 8001e1e:	bf00      	nop
 8001e20:	08002d68 	.word	0x08002d68
 8001e24:	ffff0001 	.word	0xffff0001

08001e28 <fiprintf>:
 8001e28:	b40e      	push	{r1, r2, r3}
 8001e2a:	b503      	push	{r0, r1, lr}
 8001e2c:	4601      	mov	r1, r0
 8001e2e:	ab03      	add	r3, sp, #12
 8001e30:	4805      	ldr	r0, [pc, #20]	; (8001e48 <fiprintf+0x20>)
 8001e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e36:	6800      	ldr	r0, [r0, #0]
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	f000 f935 	bl	80020a8 <_vfiprintf_r>
 8001e3e:	b002      	add	sp, #8
 8001e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e44:	b003      	add	sp, #12
 8001e46:	4770      	bx	lr
 8001e48:	2000000c 	.word	0x2000000c

08001e4c <_fwalk_reent>:
 8001e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e50:	4606      	mov	r6, r0
 8001e52:	4688      	mov	r8, r1
 8001e54:	2700      	movs	r7, #0
 8001e56:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001e5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001e5e:	f1b9 0901 	subs.w	r9, r9, #1
 8001e62:	d505      	bpl.n	8001e70 <_fwalk_reent+0x24>
 8001e64:	6824      	ldr	r4, [r4, #0]
 8001e66:	2c00      	cmp	r4, #0
 8001e68:	d1f7      	bne.n	8001e5a <_fwalk_reent+0xe>
 8001e6a:	4638      	mov	r0, r7
 8001e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e70:	89ab      	ldrh	r3, [r5, #12]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d907      	bls.n	8001e86 <_fwalk_reent+0x3a>
 8001e76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	d003      	beq.n	8001e86 <_fwalk_reent+0x3a>
 8001e7e:	4629      	mov	r1, r5
 8001e80:	4630      	mov	r0, r6
 8001e82:	47c0      	blx	r8
 8001e84:	4307      	orrs	r7, r0
 8001e86:	3568      	adds	r5, #104	; 0x68
 8001e88:	e7e9      	b.n	8001e5e <_fwalk_reent+0x12>

08001e8a <__retarget_lock_init_recursive>:
 8001e8a:	4770      	bx	lr

08001e8c <__retarget_lock_acquire_recursive>:
 8001e8c:	4770      	bx	lr

08001e8e <__retarget_lock_release_recursive>:
 8001e8e:	4770      	bx	lr

08001e90 <malloc>:
 8001e90:	4b02      	ldr	r3, [pc, #8]	; (8001e9c <malloc+0xc>)
 8001e92:	4601      	mov	r1, r0
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	f000 b86b 	b.w	8001f70 <_malloc_r>
 8001e9a:	bf00      	nop
 8001e9c:	2000000c 	.word	0x2000000c

08001ea0 <_free_r>:
 8001ea0:	b538      	push	{r3, r4, r5, lr}
 8001ea2:	4605      	mov	r5, r0
 8001ea4:	2900      	cmp	r1, #0
 8001ea6:	d040      	beq.n	8001f2a <_free_r+0x8a>
 8001ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001eac:	1f0c      	subs	r4, r1, #4
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bfb8      	it	lt
 8001eb2:	18e4      	addlt	r4, r4, r3
 8001eb4:	f000 fe40 	bl	8002b38 <__malloc_lock>
 8001eb8:	4a1c      	ldr	r2, [pc, #112]	; (8001f2c <_free_r+0x8c>)
 8001eba:	6813      	ldr	r3, [r2, #0]
 8001ebc:	b933      	cbnz	r3, 8001ecc <_free_r+0x2c>
 8001ebe:	6063      	str	r3, [r4, #4]
 8001ec0:	6014      	str	r4, [r2, #0]
 8001ec2:	4628      	mov	r0, r5
 8001ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ec8:	f000 be3c 	b.w	8002b44 <__malloc_unlock>
 8001ecc:	42a3      	cmp	r3, r4
 8001ece:	d908      	bls.n	8001ee2 <_free_r+0x42>
 8001ed0:	6820      	ldr	r0, [r4, #0]
 8001ed2:	1821      	adds	r1, r4, r0
 8001ed4:	428b      	cmp	r3, r1
 8001ed6:	bf01      	itttt	eq
 8001ed8:	6819      	ldreq	r1, [r3, #0]
 8001eda:	685b      	ldreq	r3, [r3, #4]
 8001edc:	1809      	addeq	r1, r1, r0
 8001ede:	6021      	streq	r1, [r4, #0]
 8001ee0:	e7ed      	b.n	8001ebe <_free_r+0x1e>
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	b10b      	cbz	r3, 8001eec <_free_r+0x4c>
 8001ee8:	42a3      	cmp	r3, r4
 8001eea:	d9fa      	bls.n	8001ee2 <_free_r+0x42>
 8001eec:	6811      	ldr	r1, [r2, #0]
 8001eee:	1850      	adds	r0, r2, r1
 8001ef0:	42a0      	cmp	r0, r4
 8001ef2:	d10b      	bne.n	8001f0c <_free_r+0x6c>
 8001ef4:	6820      	ldr	r0, [r4, #0]
 8001ef6:	4401      	add	r1, r0
 8001ef8:	1850      	adds	r0, r2, r1
 8001efa:	4283      	cmp	r3, r0
 8001efc:	6011      	str	r1, [r2, #0]
 8001efe:	d1e0      	bne.n	8001ec2 <_free_r+0x22>
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4401      	add	r1, r0
 8001f06:	6011      	str	r1, [r2, #0]
 8001f08:	6053      	str	r3, [r2, #4]
 8001f0a:	e7da      	b.n	8001ec2 <_free_r+0x22>
 8001f0c:	d902      	bls.n	8001f14 <_free_r+0x74>
 8001f0e:	230c      	movs	r3, #12
 8001f10:	602b      	str	r3, [r5, #0]
 8001f12:	e7d6      	b.n	8001ec2 <_free_r+0x22>
 8001f14:	6820      	ldr	r0, [r4, #0]
 8001f16:	1821      	adds	r1, r4, r0
 8001f18:	428b      	cmp	r3, r1
 8001f1a:	bf01      	itttt	eq
 8001f1c:	6819      	ldreq	r1, [r3, #0]
 8001f1e:	685b      	ldreq	r3, [r3, #4]
 8001f20:	1809      	addeq	r1, r1, r0
 8001f22:	6021      	streq	r1, [r4, #0]
 8001f24:	6063      	str	r3, [r4, #4]
 8001f26:	6054      	str	r4, [r2, #4]
 8001f28:	e7cb      	b.n	8001ec2 <_free_r+0x22>
 8001f2a:	bd38      	pop	{r3, r4, r5, pc}
 8001f2c:	20000098 	.word	0x20000098

08001f30 <sbrk_aligned>:
 8001f30:	b570      	push	{r4, r5, r6, lr}
 8001f32:	4e0e      	ldr	r6, [pc, #56]	; (8001f6c <sbrk_aligned+0x3c>)
 8001f34:	460c      	mov	r4, r1
 8001f36:	6831      	ldr	r1, [r6, #0]
 8001f38:	4605      	mov	r5, r0
 8001f3a:	b911      	cbnz	r1, 8001f42 <sbrk_aligned+0x12>
 8001f3c:	f000 fb7a 	bl	8002634 <_sbrk_r>
 8001f40:	6030      	str	r0, [r6, #0]
 8001f42:	4621      	mov	r1, r4
 8001f44:	4628      	mov	r0, r5
 8001f46:	f000 fb75 	bl	8002634 <_sbrk_r>
 8001f4a:	1c43      	adds	r3, r0, #1
 8001f4c:	d00a      	beq.n	8001f64 <sbrk_aligned+0x34>
 8001f4e:	1cc4      	adds	r4, r0, #3
 8001f50:	f024 0403 	bic.w	r4, r4, #3
 8001f54:	42a0      	cmp	r0, r4
 8001f56:	d007      	beq.n	8001f68 <sbrk_aligned+0x38>
 8001f58:	1a21      	subs	r1, r4, r0
 8001f5a:	4628      	mov	r0, r5
 8001f5c:	f000 fb6a 	bl	8002634 <_sbrk_r>
 8001f60:	3001      	adds	r0, #1
 8001f62:	d101      	bne.n	8001f68 <sbrk_aligned+0x38>
 8001f64:	f04f 34ff 	mov.w	r4, #4294967295
 8001f68:	4620      	mov	r0, r4
 8001f6a:	bd70      	pop	{r4, r5, r6, pc}
 8001f6c:	2000009c 	.word	0x2000009c

08001f70 <_malloc_r>:
 8001f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f74:	1ccd      	adds	r5, r1, #3
 8001f76:	f025 0503 	bic.w	r5, r5, #3
 8001f7a:	3508      	adds	r5, #8
 8001f7c:	2d0c      	cmp	r5, #12
 8001f7e:	bf38      	it	cc
 8001f80:	250c      	movcc	r5, #12
 8001f82:	2d00      	cmp	r5, #0
 8001f84:	4607      	mov	r7, r0
 8001f86:	db01      	blt.n	8001f8c <_malloc_r+0x1c>
 8001f88:	42a9      	cmp	r1, r5
 8001f8a:	d905      	bls.n	8001f98 <_malloc_r+0x28>
 8001f8c:	230c      	movs	r3, #12
 8001f8e:	2600      	movs	r6, #0
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	4630      	mov	r0, r6
 8001f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f98:	4e2e      	ldr	r6, [pc, #184]	; (8002054 <_malloc_r+0xe4>)
 8001f9a:	f000 fdcd 	bl	8002b38 <__malloc_lock>
 8001f9e:	6833      	ldr	r3, [r6, #0]
 8001fa0:	461c      	mov	r4, r3
 8001fa2:	bb34      	cbnz	r4, 8001ff2 <_malloc_r+0x82>
 8001fa4:	4629      	mov	r1, r5
 8001fa6:	4638      	mov	r0, r7
 8001fa8:	f7ff ffc2 	bl	8001f30 <sbrk_aligned>
 8001fac:	1c43      	adds	r3, r0, #1
 8001fae:	4604      	mov	r4, r0
 8001fb0:	d14d      	bne.n	800204e <_malloc_r+0xde>
 8001fb2:	6834      	ldr	r4, [r6, #0]
 8001fb4:	4626      	mov	r6, r4
 8001fb6:	2e00      	cmp	r6, #0
 8001fb8:	d140      	bne.n	800203c <_malloc_r+0xcc>
 8001fba:	6823      	ldr	r3, [r4, #0]
 8001fbc:	4631      	mov	r1, r6
 8001fbe:	4638      	mov	r0, r7
 8001fc0:	eb04 0803 	add.w	r8, r4, r3
 8001fc4:	f000 fb36 	bl	8002634 <_sbrk_r>
 8001fc8:	4580      	cmp	r8, r0
 8001fca:	d13a      	bne.n	8002042 <_malloc_r+0xd2>
 8001fcc:	6821      	ldr	r1, [r4, #0]
 8001fce:	3503      	adds	r5, #3
 8001fd0:	1a6d      	subs	r5, r5, r1
 8001fd2:	f025 0503 	bic.w	r5, r5, #3
 8001fd6:	3508      	adds	r5, #8
 8001fd8:	2d0c      	cmp	r5, #12
 8001fda:	bf38      	it	cc
 8001fdc:	250c      	movcc	r5, #12
 8001fde:	4638      	mov	r0, r7
 8001fe0:	4629      	mov	r1, r5
 8001fe2:	f7ff ffa5 	bl	8001f30 <sbrk_aligned>
 8001fe6:	3001      	adds	r0, #1
 8001fe8:	d02b      	beq.n	8002042 <_malloc_r+0xd2>
 8001fea:	6823      	ldr	r3, [r4, #0]
 8001fec:	442b      	add	r3, r5
 8001fee:	6023      	str	r3, [r4, #0]
 8001ff0:	e00e      	b.n	8002010 <_malloc_r+0xa0>
 8001ff2:	6822      	ldr	r2, [r4, #0]
 8001ff4:	1b52      	subs	r2, r2, r5
 8001ff6:	d41e      	bmi.n	8002036 <_malloc_r+0xc6>
 8001ff8:	2a0b      	cmp	r2, #11
 8001ffa:	d916      	bls.n	800202a <_malloc_r+0xba>
 8001ffc:	1961      	adds	r1, r4, r5
 8001ffe:	42a3      	cmp	r3, r4
 8002000:	6025      	str	r5, [r4, #0]
 8002002:	bf18      	it	ne
 8002004:	6059      	strne	r1, [r3, #4]
 8002006:	6863      	ldr	r3, [r4, #4]
 8002008:	bf08      	it	eq
 800200a:	6031      	streq	r1, [r6, #0]
 800200c:	5162      	str	r2, [r4, r5]
 800200e:	604b      	str	r3, [r1, #4]
 8002010:	4638      	mov	r0, r7
 8002012:	f104 060b 	add.w	r6, r4, #11
 8002016:	f000 fd95 	bl	8002b44 <__malloc_unlock>
 800201a:	f026 0607 	bic.w	r6, r6, #7
 800201e:	1d23      	adds	r3, r4, #4
 8002020:	1af2      	subs	r2, r6, r3
 8002022:	d0b6      	beq.n	8001f92 <_malloc_r+0x22>
 8002024:	1b9b      	subs	r3, r3, r6
 8002026:	50a3      	str	r3, [r4, r2]
 8002028:	e7b3      	b.n	8001f92 <_malloc_r+0x22>
 800202a:	6862      	ldr	r2, [r4, #4]
 800202c:	42a3      	cmp	r3, r4
 800202e:	bf0c      	ite	eq
 8002030:	6032      	streq	r2, [r6, #0]
 8002032:	605a      	strne	r2, [r3, #4]
 8002034:	e7ec      	b.n	8002010 <_malloc_r+0xa0>
 8002036:	4623      	mov	r3, r4
 8002038:	6864      	ldr	r4, [r4, #4]
 800203a:	e7b2      	b.n	8001fa2 <_malloc_r+0x32>
 800203c:	4634      	mov	r4, r6
 800203e:	6876      	ldr	r6, [r6, #4]
 8002040:	e7b9      	b.n	8001fb6 <_malloc_r+0x46>
 8002042:	230c      	movs	r3, #12
 8002044:	4638      	mov	r0, r7
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	f000 fd7c 	bl	8002b44 <__malloc_unlock>
 800204c:	e7a1      	b.n	8001f92 <_malloc_r+0x22>
 800204e:	6025      	str	r5, [r4, #0]
 8002050:	e7de      	b.n	8002010 <_malloc_r+0xa0>
 8002052:	bf00      	nop
 8002054:	20000098 	.word	0x20000098

08002058 <__sfputc_r>:
 8002058:	6893      	ldr	r3, [r2, #8]
 800205a:	b410      	push	{r4}
 800205c:	3b01      	subs	r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	6093      	str	r3, [r2, #8]
 8002062:	da07      	bge.n	8002074 <__sfputc_r+0x1c>
 8002064:	6994      	ldr	r4, [r2, #24]
 8002066:	42a3      	cmp	r3, r4
 8002068:	db01      	blt.n	800206e <__sfputc_r+0x16>
 800206a:	290a      	cmp	r1, #10
 800206c:	d102      	bne.n	8002074 <__sfputc_r+0x1c>
 800206e:	bc10      	pop	{r4}
 8002070:	f000 bb34 	b.w	80026dc <__swbuf_r>
 8002074:	6813      	ldr	r3, [r2, #0]
 8002076:	1c58      	adds	r0, r3, #1
 8002078:	6010      	str	r0, [r2, #0]
 800207a:	7019      	strb	r1, [r3, #0]
 800207c:	4608      	mov	r0, r1
 800207e:	bc10      	pop	{r4}
 8002080:	4770      	bx	lr

08002082 <__sfputs_r>:
 8002082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002084:	4606      	mov	r6, r0
 8002086:	460f      	mov	r7, r1
 8002088:	4614      	mov	r4, r2
 800208a:	18d5      	adds	r5, r2, r3
 800208c:	42ac      	cmp	r4, r5
 800208e:	d101      	bne.n	8002094 <__sfputs_r+0x12>
 8002090:	2000      	movs	r0, #0
 8002092:	e007      	b.n	80020a4 <__sfputs_r+0x22>
 8002094:	463a      	mov	r2, r7
 8002096:	4630      	mov	r0, r6
 8002098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800209c:	f7ff ffdc 	bl	8002058 <__sfputc_r>
 80020a0:	1c43      	adds	r3, r0, #1
 80020a2:	d1f3      	bne.n	800208c <__sfputs_r+0xa>
 80020a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080020a8 <_vfiprintf_r>:
 80020a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020ac:	460d      	mov	r5, r1
 80020ae:	4614      	mov	r4, r2
 80020b0:	4698      	mov	r8, r3
 80020b2:	4606      	mov	r6, r0
 80020b4:	b09d      	sub	sp, #116	; 0x74
 80020b6:	b118      	cbz	r0, 80020c0 <_vfiprintf_r+0x18>
 80020b8:	6983      	ldr	r3, [r0, #24]
 80020ba:	b90b      	cbnz	r3, 80020c0 <_vfiprintf_r+0x18>
 80020bc:	f7ff fe36 	bl	8001d2c <__sinit>
 80020c0:	4b89      	ldr	r3, [pc, #548]	; (80022e8 <_vfiprintf_r+0x240>)
 80020c2:	429d      	cmp	r5, r3
 80020c4:	d11b      	bne.n	80020fe <_vfiprintf_r+0x56>
 80020c6:	6875      	ldr	r5, [r6, #4]
 80020c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80020ca:	07d9      	lsls	r1, r3, #31
 80020cc:	d405      	bmi.n	80020da <_vfiprintf_r+0x32>
 80020ce:	89ab      	ldrh	r3, [r5, #12]
 80020d0:	059a      	lsls	r2, r3, #22
 80020d2:	d402      	bmi.n	80020da <_vfiprintf_r+0x32>
 80020d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80020d6:	f7ff fed9 	bl	8001e8c <__retarget_lock_acquire_recursive>
 80020da:	89ab      	ldrh	r3, [r5, #12]
 80020dc:	071b      	lsls	r3, r3, #28
 80020de:	d501      	bpl.n	80020e4 <_vfiprintf_r+0x3c>
 80020e0:	692b      	ldr	r3, [r5, #16]
 80020e2:	b9eb      	cbnz	r3, 8002120 <_vfiprintf_r+0x78>
 80020e4:	4629      	mov	r1, r5
 80020e6:	4630      	mov	r0, r6
 80020e8:	f000 fb5c 	bl	80027a4 <__swsetup_r>
 80020ec:	b1c0      	cbz	r0, 8002120 <_vfiprintf_r+0x78>
 80020ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80020f0:	07dc      	lsls	r4, r3, #31
 80020f2:	d50e      	bpl.n	8002112 <_vfiprintf_r+0x6a>
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295
 80020f8:	b01d      	add	sp, #116	; 0x74
 80020fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020fe:	4b7b      	ldr	r3, [pc, #492]	; (80022ec <_vfiprintf_r+0x244>)
 8002100:	429d      	cmp	r5, r3
 8002102:	d101      	bne.n	8002108 <_vfiprintf_r+0x60>
 8002104:	68b5      	ldr	r5, [r6, #8]
 8002106:	e7df      	b.n	80020c8 <_vfiprintf_r+0x20>
 8002108:	4b79      	ldr	r3, [pc, #484]	; (80022f0 <_vfiprintf_r+0x248>)
 800210a:	429d      	cmp	r5, r3
 800210c:	bf08      	it	eq
 800210e:	68f5      	ldreq	r5, [r6, #12]
 8002110:	e7da      	b.n	80020c8 <_vfiprintf_r+0x20>
 8002112:	89ab      	ldrh	r3, [r5, #12]
 8002114:	0598      	lsls	r0, r3, #22
 8002116:	d4ed      	bmi.n	80020f4 <_vfiprintf_r+0x4c>
 8002118:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800211a:	f7ff feb8 	bl	8001e8e <__retarget_lock_release_recursive>
 800211e:	e7e9      	b.n	80020f4 <_vfiprintf_r+0x4c>
 8002120:	2300      	movs	r3, #0
 8002122:	9309      	str	r3, [sp, #36]	; 0x24
 8002124:	2320      	movs	r3, #32
 8002126:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800212a:	2330      	movs	r3, #48	; 0x30
 800212c:	f04f 0901 	mov.w	r9, #1
 8002130:	f8cd 800c 	str.w	r8, [sp, #12]
 8002134:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80022f4 <_vfiprintf_r+0x24c>
 8002138:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800213c:	4623      	mov	r3, r4
 800213e:	469a      	mov	sl, r3
 8002140:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002144:	b10a      	cbz	r2, 800214a <_vfiprintf_r+0xa2>
 8002146:	2a25      	cmp	r2, #37	; 0x25
 8002148:	d1f9      	bne.n	800213e <_vfiprintf_r+0x96>
 800214a:	ebba 0b04 	subs.w	fp, sl, r4
 800214e:	d00b      	beq.n	8002168 <_vfiprintf_r+0xc0>
 8002150:	465b      	mov	r3, fp
 8002152:	4622      	mov	r2, r4
 8002154:	4629      	mov	r1, r5
 8002156:	4630      	mov	r0, r6
 8002158:	f7ff ff93 	bl	8002082 <__sfputs_r>
 800215c:	3001      	adds	r0, #1
 800215e:	f000 80aa 	beq.w	80022b6 <_vfiprintf_r+0x20e>
 8002162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002164:	445a      	add	r2, fp
 8002166:	9209      	str	r2, [sp, #36]	; 0x24
 8002168:	f89a 3000 	ldrb.w	r3, [sl]
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80a2 	beq.w	80022b6 <_vfiprintf_r+0x20e>
 8002172:	2300      	movs	r3, #0
 8002174:	f04f 32ff 	mov.w	r2, #4294967295
 8002178:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800217c:	f10a 0a01 	add.w	sl, sl, #1
 8002180:	9304      	str	r3, [sp, #16]
 8002182:	9307      	str	r3, [sp, #28]
 8002184:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002188:	931a      	str	r3, [sp, #104]	; 0x68
 800218a:	4654      	mov	r4, sl
 800218c:	2205      	movs	r2, #5
 800218e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002192:	4858      	ldr	r0, [pc, #352]	; (80022f4 <_vfiprintf_r+0x24c>)
 8002194:	f000 fcc2 	bl	8002b1c <memchr>
 8002198:	9a04      	ldr	r2, [sp, #16]
 800219a:	b9d8      	cbnz	r0, 80021d4 <_vfiprintf_r+0x12c>
 800219c:	06d1      	lsls	r1, r2, #27
 800219e:	bf44      	itt	mi
 80021a0:	2320      	movmi	r3, #32
 80021a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80021a6:	0713      	lsls	r3, r2, #28
 80021a8:	bf44      	itt	mi
 80021aa:	232b      	movmi	r3, #43	; 0x2b
 80021ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80021b0:	f89a 3000 	ldrb.w	r3, [sl]
 80021b4:	2b2a      	cmp	r3, #42	; 0x2a
 80021b6:	d015      	beq.n	80021e4 <_vfiprintf_r+0x13c>
 80021b8:	4654      	mov	r4, sl
 80021ba:	2000      	movs	r0, #0
 80021bc:	f04f 0c0a 	mov.w	ip, #10
 80021c0:	9a07      	ldr	r2, [sp, #28]
 80021c2:	4621      	mov	r1, r4
 80021c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80021c8:	3b30      	subs	r3, #48	; 0x30
 80021ca:	2b09      	cmp	r3, #9
 80021cc:	d94e      	bls.n	800226c <_vfiprintf_r+0x1c4>
 80021ce:	b1b0      	cbz	r0, 80021fe <_vfiprintf_r+0x156>
 80021d0:	9207      	str	r2, [sp, #28]
 80021d2:	e014      	b.n	80021fe <_vfiprintf_r+0x156>
 80021d4:	eba0 0308 	sub.w	r3, r0, r8
 80021d8:	fa09 f303 	lsl.w	r3, r9, r3
 80021dc:	4313      	orrs	r3, r2
 80021de:	46a2      	mov	sl, r4
 80021e0:	9304      	str	r3, [sp, #16]
 80021e2:	e7d2      	b.n	800218a <_vfiprintf_r+0xe2>
 80021e4:	9b03      	ldr	r3, [sp, #12]
 80021e6:	1d19      	adds	r1, r3, #4
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	9103      	str	r1, [sp, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bfbb      	ittet	lt
 80021f0:	425b      	neglt	r3, r3
 80021f2:	f042 0202 	orrlt.w	r2, r2, #2
 80021f6:	9307      	strge	r3, [sp, #28]
 80021f8:	9307      	strlt	r3, [sp, #28]
 80021fa:	bfb8      	it	lt
 80021fc:	9204      	strlt	r2, [sp, #16]
 80021fe:	7823      	ldrb	r3, [r4, #0]
 8002200:	2b2e      	cmp	r3, #46	; 0x2e
 8002202:	d10c      	bne.n	800221e <_vfiprintf_r+0x176>
 8002204:	7863      	ldrb	r3, [r4, #1]
 8002206:	2b2a      	cmp	r3, #42	; 0x2a
 8002208:	d135      	bne.n	8002276 <_vfiprintf_r+0x1ce>
 800220a:	9b03      	ldr	r3, [sp, #12]
 800220c:	3402      	adds	r4, #2
 800220e:	1d1a      	adds	r2, r3, #4
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	9203      	str	r2, [sp, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	bfb8      	it	lt
 8002218:	f04f 33ff 	movlt.w	r3, #4294967295
 800221c:	9305      	str	r3, [sp, #20]
 800221e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80022f8 <_vfiprintf_r+0x250>
 8002222:	2203      	movs	r2, #3
 8002224:	4650      	mov	r0, sl
 8002226:	7821      	ldrb	r1, [r4, #0]
 8002228:	f000 fc78 	bl	8002b1c <memchr>
 800222c:	b140      	cbz	r0, 8002240 <_vfiprintf_r+0x198>
 800222e:	2340      	movs	r3, #64	; 0x40
 8002230:	eba0 000a 	sub.w	r0, r0, sl
 8002234:	fa03 f000 	lsl.w	r0, r3, r0
 8002238:	9b04      	ldr	r3, [sp, #16]
 800223a:	3401      	adds	r4, #1
 800223c:	4303      	orrs	r3, r0
 800223e:	9304      	str	r3, [sp, #16]
 8002240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002244:	2206      	movs	r2, #6
 8002246:	482d      	ldr	r0, [pc, #180]	; (80022fc <_vfiprintf_r+0x254>)
 8002248:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800224c:	f000 fc66 	bl	8002b1c <memchr>
 8002250:	2800      	cmp	r0, #0
 8002252:	d03f      	beq.n	80022d4 <_vfiprintf_r+0x22c>
 8002254:	4b2a      	ldr	r3, [pc, #168]	; (8002300 <_vfiprintf_r+0x258>)
 8002256:	bb1b      	cbnz	r3, 80022a0 <_vfiprintf_r+0x1f8>
 8002258:	9b03      	ldr	r3, [sp, #12]
 800225a:	3307      	adds	r3, #7
 800225c:	f023 0307 	bic.w	r3, r3, #7
 8002260:	3308      	adds	r3, #8
 8002262:	9303      	str	r3, [sp, #12]
 8002264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002266:	443b      	add	r3, r7
 8002268:	9309      	str	r3, [sp, #36]	; 0x24
 800226a:	e767      	b.n	800213c <_vfiprintf_r+0x94>
 800226c:	460c      	mov	r4, r1
 800226e:	2001      	movs	r0, #1
 8002270:	fb0c 3202 	mla	r2, ip, r2, r3
 8002274:	e7a5      	b.n	80021c2 <_vfiprintf_r+0x11a>
 8002276:	2300      	movs	r3, #0
 8002278:	f04f 0c0a 	mov.w	ip, #10
 800227c:	4619      	mov	r1, r3
 800227e:	3401      	adds	r4, #1
 8002280:	9305      	str	r3, [sp, #20]
 8002282:	4620      	mov	r0, r4
 8002284:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002288:	3a30      	subs	r2, #48	; 0x30
 800228a:	2a09      	cmp	r2, #9
 800228c:	d903      	bls.n	8002296 <_vfiprintf_r+0x1ee>
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0c5      	beq.n	800221e <_vfiprintf_r+0x176>
 8002292:	9105      	str	r1, [sp, #20]
 8002294:	e7c3      	b.n	800221e <_vfiprintf_r+0x176>
 8002296:	4604      	mov	r4, r0
 8002298:	2301      	movs	r3, #1
 800229a:	fb0c 2101 	mla	r1, ip, r1, r2
 800229e:	e7f0      	b.n	8002282 <_vfiprintf_r+0x1da>
 80022a0:	ab03      	add	r3, sp, #12
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	462a      	mov	r2, r5
 80022a6:	4630      	mov	r0, r6
 80022a8:	4b16      	ldr	r3, [pc, #88]	; (8002304 <_vfiprintf_r+0x25c>)
 80022aa:	a904      	add	r1, sp, #16
 80022ac:	f3af 8000 	nop.w
 80022b0:	4607      	mov	r7, r0
 80022b2:	1c78      	adds	r0, r7, #1
 80022b4:	d1d6      	bne.n	8002264 <_vfiprintf_r+0x1bc>
 80022b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80022b8:	07d9      	lsls	r1, r3, #31
 80022ba:	d405      	bmi.n	80022c8 <_vfiprintf_r+0x220>
 80022bc:	89ab      	ldrh	r3, [r5, #12]
 80022be:	059a      	lsls	r2, r3, #22
 80022c0:	d402      	bmi.n	80022c8 <_vfiprintf_r+0x220>
 80022c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80022c4:	f7ff fde3 	bl	8001e8e <__retarget_lock_release_recursive>
 80022c8:	89ab      	ldrh	r3, [r5, #12]
 80022ca:	065b      	lsls	r3, r3, #25
 80022cc:	f53f af12 	bmi.w	80020f4 <_vfiprintf_r+0x4c>
 80022d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80022d2:	e711      	b.n	80020f8 <_vfiprintf_r+0x50>
 80022d4:	ab03      	add	r3, sp, #12
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	462a      	mov	r2, r5
 80022da:	4630      	mov	r0, r6
 80022dc:	4b09      	ldr	r3, [pc, #36]	; (8002304 <_vfiprintf_r+0x25c>)
 80022de:	a904      	add	r1, sp, #16
 80022e0:	f000 f882 	bl	80023e8 <_printf_i>
 80022e4:	e7e4      	b.n	80022b0 <_vfiprintf_r+0x208>
 80022e6:	bf00      	nop
 80022e8:	08002e3c 	.word	0x08002e3c
 80022ec:	08002e5c 	.word	0x08002e5c
 80022f0:	08002e1c 	.word	0x08002e1c
 80022f4:	08002e7c 	.word	0x08002e7c
 80022f8:	08002e82 	.word	0x08002e82
 80022fc:	08002e86 	.word	0x08002e86
 8002300:	00000000 	.word	0x00000000
 8002304:	08002083 	.word	0x08002083

08002308 <_printf_common>:
 8002308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800230c:	4616      	mov	r6, r2
 800230e:	4699      	mov	r9, r3
 8002310:	688a      	ldr	r2, [r1, #8]
 8002312:	690b      	ldr	r3, [r1, #16]
 8002314:	4607      	mov	r7, r0
 8002316:	4293      	cmp	r3, r2
 8002318:	bfb8      	it	lt
 800231a:	4613      	movlt	r3, r2
 800231c:	6033      	str	r3, [r6, #0]
 800231e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002322:	460c      	mov	r4, r1
 8002324:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002328:	b10a      	cbz	r2, 800232e <_printf_common+0x26>
 800232a:	3301      	adds	r3, #1
 800232c:	6033      	str	r3, [r6, #0]
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	0699      	lsls	r1, r3, #26
 8002332:	bf42      	ittt	mi
 8002334:	6833      	ldrmi	r3, [r6, #0]
 8002336:	3302      	addmi	r3, #2
 8002338:	6033      	strmi	r3, [r6, #0]
 800233a:	6825      	ldr	r5, [r4, #0]
 800233c:	f015 0506 	ands.w	r5, r5, #6
 8002340:	d106      	bne.n	8002350 <_printf_common+0x48>
 8002342:	f104 0a19 	add.w	sl, r4, #25
 8002346:	68e3      	ldr	r3, [r4, #12]
 8002348:	6832      	ldr	r2, [r6, #0]
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	42ab      	cmp	r3, r5
 800234e:	dc28      	bgt.n	80023a2 <_printf_common+0x9a>
 8002350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002354:	1e13      	subs	r3, r2, #0
 8002356:	6822      	ldr	r2, [r4, #0]
 8002358:	bf18      	it	ne
 800235a:	2301      	movne	r3, #1
 800235c:	0692      	lsls	r2, r2, #26
 800235e:	d42d      	bmi.n	80023bc <_printf_common+0xb4>
 8002360:	4649      	mov	r1, r9
 8002362:	4638      	mov	r0, r7
 8002364:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002368:	47c0      	blx	r8
 800236a:	3001      	adds	r0, #1
 800236c:	d020      	beq.n	80023b0 <_printf_common+0xa8>
 800236e:	6823      	ldr	r3, [r4, #0]
 8002370:	68e5      	ldr	r5, [r4, #12]
 8002372:	f003 0306 	and.w	r3, r3, #6
 8002376:	2b04      	cmp	r3, #4
 8002378:	bf18      	it	ne
 800237a:	2500      	movne	r5, #0
 800237c:	6832      	ldr	r2, [r6, #0]
 800237e:	f04f 0600 	mov.w	r6, #0
 8002382:	68a3      	ldr	r3, [r4, #8]
 8002384:	bf08      	it	eq
 8002386:	1aad      	subeq	r5, r5, r2
 8002388:	6922      	ldr	r2, [r4, #16]
 800238a:	bf08      	it	eq
 800238c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002390:	4293      	cmp	r3, r2
 8002392:	bfc4      	itt	gt
 8002394:	1a9b      	subgt	r3, r3, r2
 8002396:	18ed      	addgt	r5, r5, r3
 8002398:	341a      	adds	r4, #26
 800239a:	42b5      	cmp	r5, r6
 800239c:	d11a      	bne.n	80023d4 <_printf_common+0xcc>
 800239e:	2000      	movs	r0, #0
 80023a0:	e008      	b.n	80023b4 <_printf_common+0xac>
 80023a2:	2301      	movs	r3, #1
 80023a4:	4652      	mov	r2, sl
 80023a6:	4649      	mov	r1, r9
 80023a8:	4638      	mov	r0, r7
 80023aa:	47c0      	blx	r8
 80023ac:	3001      	adds	r0, #1
 80023ae:	d103      	bne.n	80023b8 <_printf_common+0xb0>
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295
 80023b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023b8:	3501      	adds	r5, #1
 80023ba:	e7c4      	b.n	8002346 <_printf_common+0x3e>
 80023bc:	2030      	movs	r0, #48	; 0x30
 80023be:	18e1      	adds	r1, r4, r3
 80023c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80023ca:	4422      	add	r2, r4
 80023cc:	3302      	adds	r3, #2
 80023ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80023d2:	e7c5      	b.n	8002360 <_printf_common+0x58>
 80023d4:	2301      	movs	r3, #1
 80023d6:	4622      	mov	r2, r4
 80023d8:	4649      	mov	r1, r9
 80023da:	4638      	mov	r0, r7
 80023dc:	47c0      	blx	r8
 80023de:	3001      	adds	r0, #1
 80023e0:	d0e6      	beq.n	80023b0 <_printf_common+0xa8>
 80023e2:	3601      	adds	r6, #1
 80023e4:	e7d9      	b.n	800239a <_printf_common+0x92>
	...

080023e8 <_printf_i>:
 80023e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80023ec:	7e0f      	ldrb	r7, [r1, #24]
 80023ee:	4691      	mov	r9, r2
 80023f0:	2f78      	cmp	r7, #120	; 0x78
 80023f2:	4680      	mov	r8, r0
 80023f4:	460c      	mov	r4, r1
 80023f6:	469a      	mov	sl, r3
 80023f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80023fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80023fe:	d807      	bhi.n	8002410 <_printf_i+0x28>
 8002400:	2f62      	cmp	r7, #98	; 0x62
 8002402:	d80a      	bhi.n	800241a <_printf_i+0x32>
 8002404:	2f00      	cmp	r7, #0
 8002406:	f000 80d9 	beq.w	80025bc <_printf_i+0x1d4>
 800240a:	2f58      	cmp	r7, #88	; 0x58
 800240c:	f000 80a4 	beq.w	8002558 <_printf_i+0x170>
 8002410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002414:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002418:	e03a      	b.n	8002490 <_printf_i+0xa8>
 800241a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800241e:	2b15      	cmp	r3, #21
 8002420:	d8f6      	bhi.n	8002410 <_printf_i+0x28>
 8002422:	a101      	add	r1, pc, #4	; (adr r1, 8002428 <_printf_i+0x40>)
 8002424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002428:	08002481 	.word	0x08002481
 800242c:	08002495 	.word	0x08002495
 8002430:	08002411 	.word	0x08002411
 8002434:	08002411 	.word	0x08002411
 8002438:	08002411 	.word	0x08002411
 800243c:	08002411 	.word	0x08002411
 8002440:	08002495 	.word	0x08002495
 8002444:	08002411 	.word	0x08002411
 8002448:	08002411 	.word	0x08002411
 800244c:	08002411 	.word	0x08002411
 8002450:	08002411 	.word	0x08002411
 8002454:	080025a3 	.word	0x080025a3
 8002458:	080024c5 	.word	0x080024c5
 800245c:	08002585 	.word	0x08002585
 8002460:	08002411 	.word	0x08002411
 8002464:	08002411 	.word	0x08002411
 8002468:	080025c5 	.word	0x080025c5
 800246c:	08002411 	.word	0x08002411
 8002470:	080024c5 	.word	0x080024c5
 8002474:	08002411 	.word	0x08002411
 8002478:	08002411 	.word	0x08002411
 800247c:	0800258d 	.word	0x0800258d
 8002480:	682b      	ldr	r3, [r5, #0]
 8002482:	1d1a      	adds	r2, r3, #4
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	602a      	str	r2, [r5, #0]
 8002488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800248c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002490:	2301      	movs	r3, #1
 8002492:	e0a4      	b.n	80025de <_printf_i+0x1f6>
 8002494:	6820      	ldr	r0, [r4, #0]
 8002496:	6829      	ldr	r1, [r5, #0]
 8002498:	0606      	lsls	r6, r0, #24
 800249a:	f101 0304 	add.w	r3, r1, #4
 800249e:	d50a      	bpl.n	80024b6 <_printf_i+0xce>
 80024a0:	680e      	ldr	r6, [r1, #0]
 80024a2:	602b      	str	r3, [r5, #0]
 80024a4:	2e00      	cmp	r6, #0
 80024a6:	da03      	bge.n	80024b0 <_printf_i+0xc8>
 80024a8:	232d      	movs	r3, #45	; 0x2d
 80024aa:	4276      	negs	r6, r6
 80024ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024b0:	230a      	movs	r3, #10
 80024b2:	485e      	ldr	r0, [pc, #376]	; (800262c <_printf_i+0x244>)
 80024b4:	e019      	b.n	80024ea <_printf_i+0x102>
 80024b6:	680e      	ldr	r6, [r1, #0]
 80024b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80024bc:	602b      	str	r3, [r5, #0]
 80024be:	bf18      	it	ne
 80024c0:	b236      	sxthne	r6, r6
 80024c2:	e7ef      	b.n	80024a4 <_printf_i+0xbc>
 80024c4:	682b      	ldr	r3, [r5, #0]
 80024c6:	6820      	ldr	r0, [r4, #0]
 80024c8:	1d19      	adds	r1, r3, #4
 80024ca:	6029      	str	r1, [r5, #0]
 80024cc:	0601      	lsls	r1, r0, #24
 80024ce:	d501      	bpl.n	80024d4 <_printf_i+0xec>
 80024d0:	681e      	ldr	r6, [r3, #0]
 80024d2:	e002      	b.n	80024da <_printf_i+0xf2>
 80024d4:	0646      	lsls	r6, r0, #25
 80024d6:	d5fb      	bpl.n	80024d0 <_printf_i+0xe8>
 80024d8:	881e      	ldrh	r6, [r3, #0]
 80024da:	2f6f      	cmp	r7, #111	; 0x6f
 80024dc:	bf0c      	ite	eq
 80024de:	2308      	moveq	r3, #8
 80024e0:	230a      	movne	r3, #10
 80024e2:	4852      	ldr	r0, [pc, #328]	; (800262c <_printf_i+0x244>)
 80024e4:	2100      	movs	r1, #0
 80024e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80024ea:	6865      	ldr	r5, [r4, #4]
 80024ec:	2d00      	cmp	r5, #0
 80024ee:	bfa8      	it	ge
 80024f0:	6821      	ldrge	r1, [r4, #0]
 80024f2:	60a5      	str	r5, [r4, #8]
 80024f4:	bfa4      	itt	ge
 80024f6:	f021 0104 	bicge.w	r1, r1, #4
 80024fa:	6021      	strge	r1, [r4, #0]
 80024fc:	b90e      	cbnz	r6, 8002502 <_printf_i+0x11a>
 80024fe:	2d00      	cmp	r5, #0
 8002500:	d04d      	beq.n	800259e <_printf_i+0x1b6>
 8002502:	4615      	mov	r5, r2
 8002504:	fbb6 f1f3 	udiv	r1, r6, r3
 8002508:	fb03 6711 	mls	r7, r3, r1, r6
 800250c:	5dc7      	ldrb	r7, [r0, r7]
 800250e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002512:	4637      	mov	r7, r6
 8002514:	42bb      	cmp	r3, r7
 8002516:	460e      	mov	r6, r1
 8002518:	d9f4      	bls.n	8002504 <_printf_i+0x11c>
 800251a:	2b08      	cmp	r3, #8
 800251c:	d10b      	bne.n	8002536 <_printf_i+0x14e>
 800251e:	6823      	ldr	r3, [r4, #0]
 8002520:	07de      	lsls	r6, r3, #31
 8002522:	d508      	bpl.n	8002536 <_printf_i+0x14e>
 8002524:	6923      	ldr	r3, [r4, #16]
 8002526:	6861      	ldr	r1, [r4, #4]
 8002528:	4299      	cmp	r1, r3
 800252a:	bfde      	ittt	le
 800252c:	2330      	movle	r3, #48	; 0x30
 800252e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002532:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002536:	1b52      	subs	r2, r2, r5
 8002538:	6122      	str	r2, [r4, #16]
 800253a:	464b      	mov	r3, r9
 800253c:	4621      	mov	r1, r4
 800253e:	4640      	mov	r0, r8
 8002540:	f8cd a000 	str.w	sl, [sp]
 8002544:	aa03      	add	r2, sp, #12
 8002546:	f7ff fedf 	bl	8002308 <_printf_common>
 800254a:	3001      	adds	r0, #1
 800254c:	d14c      	bne.n	80025e8 <_printf_i+0x200>
 800254e:	f04f 30ff 	mov.w	r0, #4294967295
 8002552:	b004      	add	sp, #16
 8002554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002558:	4834      	ldr	r0, [pc, #208]	; (800262c <_printf_i+0x244>)
 800255a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800255e:	6829      	ldr	r1, [r5, #0]
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	f851 6b04 	ldr.w	r6, [r1], #4
 8002566:	6029      	str	r1, [r5, #0]
 8002568:	061d      	lsls	r5, r3, #24
 800256a:	d514      	bpl.n	8002596 <_printf_i+0x1ae>
 800256c:	07df      	lsls	r7, r3, #31
 800256e:	bf44      	itt	mi
 8002570:	f043 0320 	orrmi.w	r3, r3, #32
 8002574:	6023      	strmi	r3, [r4, #0]
 8002576:	b91e      	cbnz	r6, 8002580 <_printf_i+0x198>
 8002578:	6823      	ldr	r3, [r4, #0]
 800257a:	f023 0320 	bic.w	r3, r3, #32
 800257e:	6023      	str	r3, [r4, #0]
 8002580:	2310      	movs	r3, #16
 8002582:	e7af      	b.n	80024e4 <_printf_i+0xfc>
 8002584:	6823      	ldr	r3, [r4, #0]
 8002586:	f043 0320 	orr.w	r3, r3, #32
 800258a:	6023      	str	r3, [r4, #0]
 800258c:	2378      	movs	r3, #120	; 0x78
 800258e:	4828      	ldr	r0, [pc, #160]	; (8002630 <_printf_i+0x248>)
 8002590:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002594:	e7e3      	b.n	800255e <_printf_i+0x176>
 8002596:	0659      	lsls	r1, r3, #25
 8002598:	bf48      	it	mi
 800259a:	b2b6      	uxthmi	r6, r6
 800259c:	e7e6      	b.n	800256c <_printf_i+0x184>
 800259e:	4615      	mov	r5, r2
 80025a0:	e7bb      	b.n	800251a <_printf_i+0x132>
 80025a2:	682b      	ldr	r3, [r5, #0]
 80025a4:	6826      	ldr	r6, [r4, #0]
 80025a6:	1d18      	adds	r0, r3, #4
 80025a8:	6961      	ldr	r1, [r4, #20]
 80025aa:	6028      	str	r0, [r5, #0]
 80025ac:	0635      	lsls	r5, r6, #24
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	d501      	bpl.n	80025b6 <_printf_i+0x1ce>
 80025b2:	6019      	str	r1, [r3, #0]
 80025b4:	e002      	b.n	80025bc <_printf_i+0x1d4>
 80025b6:	0670      	lsls	r0, r6, #25
 80025b8:	d5fb      	bpl.n	80025b2 <_printf_i+0x1ca>
 80025ba:	8019      	strh	r1, [r3, #0]
 80025bc:	2300      	movs	r3, #0
 80025be:	4615      	mov	r5, r2
 80025c0:	6123      	str	r3, [r4, #16]
 80025c2:	e7ba      	b.n	800253a <_printf_i+0x152>
 80025c4:	682b      	ldr	r3, [r5, #0]
 80025c6:	2100      	movs	r1, #0
 80025c8:	1d1a      	adds	r2, r3, #4
 80025ca:	602a      	str	r2, [r5, #0]
 80025cc:	681d      	ldr	r5, [r3, #0]
 80025ce:	6862      	ldr	r2, [r4, #4]
 80025d0:	4628      	mov	r0, r5
 80025d2:	f000 faa3 	bl	8002b1c <memchr>
 80025d6:	b108      	cbz	r0, 80025dc <_printf_i+0x1f4>
 80025d8:	1b40      	subs	r0, r0, r5
 80025da:	6060      	str	r0, [r4, #4]
 80025dc:	6863      	ldr	r3, [r4, #4]
 80025de:	6123      	str	r3, [r4, #16]
 80025e0:	2300      	movs	r3, #0
 80025e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025e6:	e7a8      	b.n	800253a <_printf_i+0x152>
 80025e8:	462a      	mov	r2, r5
 80025ea:	4649      	mov	r1, r9
 80025ec:	4640      	mov	r0, r8
 80025ee:	6923      	ldr	r3, [r4, #16]
 80025f0:	47d0      	blx	sl
 80025f2:	3001      	adds	r0, #1
 80025f4:	d0ab      	beq.n	800254e <_printf_i+0x166>
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	079b      	lsls	r3, r3, #30
 80025fa:	d413      	bmi.n	8002624 <_printf_i+0x23c>
 80025fc:	68e0      	ldr	r0, [r4, #12]
 80025fe:	9b03      	ldr	r3, [sp, #12]
 8002600:	4298      	cmp	r0, r3
 8002602:	bfb8      	it	lt
 8002604:	4618      	movlt	r0, r3
 8002606:	e7a4      	b.n	8002552 <_printf_i+0x16a>
 8002608:	2301      	movs	r3, #1
 800260a:	4632      	mov	r2, r6
 800260c:	4649      	mov	r1, r9
 800260e:	4640      	mov	r0, r8
 8002610:	47d0      	blx	sl
 8002612:	3001      	adds	r0, #1
 8002614:	d09b      	beq.n	800254e <_printf_i+0x166>
 8002616:	3501      	adds	r5, #1
 8002618:	68e3      	ldr	r3, [r4, #12]
 800261a:	9903      	ldr	r1, [sp, #12]
 800261c:	1a5b      	subs	r3, r3, r1
 800261e:	42ab      	cmp	r3, r5
 8002620:	dcf2      	bgt.n	8002608 <_printf_i+0x220>
 8002622:	e7eb      	b.n	80025fc <_printf_i+0x214>
 8002624:	2500      	movs	r5, #0
 8002626:	f104 0619 	add.w	r6, r4, #25
 800262a:	e7f5      	b.n	8002618 <_printf_i+0x230>
 800262c:	08002e8d 	.word	0x08002e8d
 8002630:	08002e9e 	.word	0x08002e9e

08002634 <_sbrk_r>:
 8002634:	b538      	push	{r3, r4, r5, lr}
 8002636:	2300      	movs	r3, #0
 8002638:	4d05      	ldr	r5, [pc, #20]	; (8002650 <_sbrk_r+0x1c>)
 800263a:	4604      	mov	r4, r0
 800263c:	4608      	mov	r0, r1
 800263e:	602b      	str	r3, [r5, #0]
 8002640:	f7fe fb18 	bl	8000c74 <_sbrk>
 8002644:	1c43      	adds	r3, r0, #1
 8002646:	d102      	bne.n	800264e <_sbrk_r+0x1a>
 8002648:	682b      	ldr	r3, [r5, #0]
 800264a:	b103      	cbz	r3, 800264e <_sbrk_r+0x1a>
 800264c:	6023      	str	r3, [r4, #0]
 800264e:	bd38      	pop	{r3, r4, r5, pc}
 8002650:	200000a0 	.word	0x200000a0

08002654 <__sread>:
 8002654:	b510      	push	{r4, lr}
 8002656:	460c      	mov	r4, r1
 8002658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800265c:	f000 fa78 	bl	8002b50 <_read_r>
 8002660:	2800      	cmp	r0, #0
 8002662:	bfab      	itete	ge
 8002664:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002666:	89a3      	ldrhlt	r3, [r4, #12]
 8002668:	181b      	addge	r3, r3, r0
 800266a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800266e:	bfac      	ite	ge
 8002670:	6563      	strge	r3, [r4, #84]	; 0x54
 8002672:	81a3      	strhlt	r3, [r4, #12]
 8002674:	bd10      	pop	{r4, pc}

08002676 <__swrite>:
 8002676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800267a:	461f      	mov	r7, r3
 800267c:	898b      	ldrh	r3, [r1, #12]
 800267e:	4605      	mov	r5, r0
 8002680:	05db      	lsls	r3, r3, #23
 8002682:	460c      	mov	r4, r1
 8002684:	4616      	mov	r6, r2
 8002686:	d505      	bpl.n	8002694 <__swrite+0x1e>
 8002688:	2302      	movs	r3, #2
 800268a:	2200      	movs	r2, #0
 800268c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002690:	f000 f9cc 	bl	8002a2c <_lseek_r>
 8002694:	89a3      	ldrh	r3, [r4, #12]
 8002696:	4632      	mov	r2, r6
 8002698:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800269c:	81a3      	strh	r3, [r4, #12]
 800269e:	4628      	mov	r0, r5
 80026a0:	463b      	mov	r3, r7
 80026a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026aa:	f000 b869 	b.w	8002780 <_write_r>

080026ae <__sseek>:
 80026ae:	b510      	push	{r4, lr}
 80026b0:	460c      	mov	r4, r1
 80026b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026b6:	f000 f9b9 	bl	8002a2c <_lseek_r>
 80026ba:	1c43      	adds	r3, r0, #1
 80026bc:	89a3      	ldrh	r3, [r4, #12]
 80026be:	bf15      	itete	ne
 80026c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80026c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80026c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80026ca:	81a3      	strheq	r3, [r4, #12]
 80026cc:	bf18      	it	ne
 80026ce:	81a3      	strhne	r3, [r4, #12]
 80026d0:	bd10      	pop	{r4, pc}

080026d2 <__sclose>:
 80026d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026d6:	f000 b8db 	b.w	8002890 <_close_r>
	...

080026dc <__swbuf_r>:
 80026dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026de:	460e      	mov	r6, r1
 80026e0:	4614      	mov	r4, r2
 80026e2:	4605      	mov	r5, r0
 80026e4:	b118      	cbz	r0, 80026ee <__swbuf_r+0x12>
 80026e6:	6983      	ldr	r3, [r0, #24]
 80026e8:	b90b      	cbnz	r3, 80026ee <__swbuf_r+0x12>
 80026ea:	f7ff fb1f 	bl	8001d2c <__sinit>
 80026ee:	4b21      	ldr	r3, [pc, #132]	; (8002774 <__swbuf_r+0x98>)
 80026f0:	429c      	cmp	r4, r3
 80026f2:	d12b      	bne.n	800274c <__swbuf_r+0x70>
 80026f4:	686c      	ldr	r4, [r5, #4]
 80026f6:	69a3      	ldr	r3, [r4, #24]
 80026f8:	60a3      	str	r3, [r4, #8]
 80026fa:	89a3      	ldrh	r3, [r4, #12]
 80026fc:	071a      	lsls	r2, r3, #28
 80026fe:	d52f      	bpl.n	8002760 <__swbuf_r+0x84>
 8002700:	6923      	ldr	r3, [r4, #16]
 8002702:	b36b      	cbz	r3, 8002760 <__swbuf_r+0x84>
 8002704:	6923      	ldr	r3, [r4, #16]
 8002706:	6820      	ldr	r0, [r4, #0]
 8002708:	b2f6      	uxtb	r6, r6
 800270a:	1ac0      	subs	r0, r0, r3
 800270c:	6963      	ldr	r3, [r4, #20]
 800270e:	4637      	mov	r7, r6
 8002710:	4283      	cmp	r3, r0
 8002712:	dc04      	bgt.n	800271e <__swbuf_r+0x42>
 8002714:	4621      	mov	r1, r4
 8002716:	4628      	mov	r0, r5
 8002718:	f000 f94c 	bl	80029b4 <_fflush_r>
 800271c:	bb30      	cbnz	r0, 800276c <__swbuf_r+0x90>
 800271e:	68a3      	ldr	r3, [r4, #8]
 8002720:	3001      	adds	r0, #1
 8002722:	3b01      	subs	r3, #1
 8002724:	60a3      	str	r3, [r4, #8]
 8002726:	6823      	ldr	r3, [r4, #0]
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	6022      	str	r2, [r4, #0]
 800272c:	701e      	strb	r6, [r3, #0]
 800272e:	6963      	ldr	r3, [r4, #20]
 8002730:	4283      	cmp	r3, r0
 8002732:	d004      	beq.n	800273e <__swbuf_r+0x62>
 8002734:	89a3      	ldrh	r3, [r4, #12]
 8002736:	07db      	lsls	r3, r3, #31
 8002738:	d506      	bpl.n	8002748 <__swbuf_r+0x6c>
 800273a:	2e0a      	cmp	r6, #10
 800273c:	d104      	bne.n	8002748 <__swbuf_r+0x6c>
 800273e:	4621      	mov	r1, r4
 8002740:	4628      	mov	r0, r5
 8002742:	f000 f937 	bl	80029b4 <_fflush_r>
 8002746:	b988      	cbnz	r0, 800276c <__swbuf_r+0x90>
 8002748:	4638      	mov	r0, r7
 800274a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800274c:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <__swbuf_r+0x9c>)
 800274e:	429c      	cmp	r4, r3
 8002750:	d101      	bne.n	8002756 <__swbuf_r+0x7a>
 8002752:	68ac      	ldr	r4, [r5, #8]
 8002754:	e7cf      	b.n	80026f6 <__swbuf_r+0x1a>
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <__swbuf_r+0xa0>)
 8002758:	429c      	cmp	r4, r3
 800275a:	bf08      	it	eq
 800275c:	68ec      	ldreq	r4, [r5, #12]
 800275e:	e7ca      	b.n	80026f6 <__swbuf_r+0x1a>
 8002760:	4621      	mov	r1, r4
 8002762:	4628      	mov	r0, r5
 8002764:	f000 f81e 	bl	80027a4 <__swsetup_r>
 8002768:	2800      	cmp	r0, #0
 800276a:	d0cb      	beq.n	8002704 <__swbuf_r+0x28>
 800276c:	f04f 37ff 	mov.w	r7, #4294967295
 8002770:	e7ea      	b.n	8002748 <__swbuf_r+0x6c>
 8002772:	bf00      	nop
 8002774:	08002e3c 	.word	0x08002e3c
 8002778:	08002e5c 	.word	0x08002e5c
 800277c:	08002e1c 	.word	0x08002e1c

08002780 <_write_r>:
 8002780:	b538      	push	{r3, r4, r5, lr}
 8002782:	4604      	mov	r4, r0
 8002784:	4608      	mov	r0, r1
 8002786:	4611      	mov	r1, r2
 8002788:	2200      	movs	r2, #0
 800278a:	4d05      	ldr	r5, [pc, #20]	; (80027a0 <_write_r+0x20>)
 800278c:	602a      	str	r2, [r5, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	f7fe fa23 	bl	8000bda <_write>
 8002794:	1c43      	adds	r3, r0, #1
 8002796:	d102      	bne.n	800279e <_write_r+0x1e>
 8002798:	682b      	ldr	r3, [r5, #0]
 800279a:	b103      	cbz	r3, 800279e <_write_r+0x1e>
 800279c:	6023      	str	r3, [r4, #0]
 800279e:	bd38      	pop	{r3, r4, r5, pc}
 80027a0:	200000a0 	.word	0x200000a0

080027a4 <__swsetup_r>:
 80027a4:	4b32      	ldr	r3, [pc, #200]	; (8002870 <__swsetup_r+0xcc>)
 80027a6:	b570      	push	{r4, r5, r6, lr}
 80027a8:	681d      	ldr	r5, [r3, #0]
 80027aa:	4606      	mov	r6, r0
 80027ac:	460c      	mov	r4, r1
 80027ae:	b125      	cbz	r5, 80027ba <__swsetup_r+0x16>
 80027b0:	69ab      	ldr	r3, [r5, #24]
 80027b2:	b913      	cbnz	r3, 80027ba <__swsetup_r+0x16>
 80027b4:	4628      	mov	r0, r5
 80027b6:	f7ff fab9 	bl	8001d2c <__sinit>
 80027ba:	4b2e      	ldr	r3, [pc, #184]	; (8002874 <__swsetup_r+0xd0>)
 80027bc:	429c      	cmp	r4, r3
 80027be:	d10f      	bne.n	80027e0 <__swsetup_r+0x3c>
 80027c0:	686c      	ldr	r4, [r5, #4]
 80027c2:	89a3      	ldrh	r3, [r4, #12]
 80027c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80027c8:	0719      	lsls	r1, r3, #28
 80027ca:	d42c      	bmi.n	8002826 <__swsetup_r+0x82>
 80027cc:	06dd      	lsls	r5, r3, #27
 80027ce:	d411      	bmi.n	80027f4 <__swsetup_r+0x50>
 80027d0:	2309      	movs	r3, #9
 80027d2:	6033      	str	r3, [r6, #0]
 80027d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80027d8:	f04f 30ff 	mov.w	r0, #4294967295
 80027dc:	81a3      	strh	r3, [r4, #12]
 80027de:	e03e      	b.n	800285e <__swsetup_r+0xba>
 80027e0:	4b25      	ldr	r3, [pc, #148]	; (8002878 <__swsetup_r+0xd4>)
 80027e2:	429c      	cmp	r4, r3
 80027e4:	d101      	bne.n	80027ea <__swsetup_r+0x46>
 80027e6:	68ac      	ldr	r4, [r5, #8]
 80027e8:	e7eb      	b.n	80027c2 <__swsetup_r+0x1e>
 80027ea:	4b24      	ldr	r3, [pc, #144]	; (800287c <__swsetup_r+0xd8>)
 80027ec:	429c      	cmp	r4, r3
 80027ee:	bf08      	it	eq
 80027f0:	68ec      	ldreq	r4, [r5, #12]
 80027f2:	e7e6      	b.n	80027c2 <__swsetup_r+0x1e>
 80027f4:	0758      	lsls	r0, r3, #29
 80027f6:	d512      	bpl.n	800281e <__swsetup_r+0x7a>
 80027f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80027fa:	b141      	cbz	r1, 800280e <__swsetup_r+0x6a>
 80027fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002800:	4299      	cmp	r1, r3
 8002802:	d002      	beq.n	800280a <__swsetup_r+0x66>
 8002804:	4630      	mov	r0, r6
 8002806:	f7ff fb4b 	bl	8001ea0 <_free_r>
 800280a:	2300      	movs	r3, #0
 800280c:	6363      	str	r3, [r4, #52]	; 0x34
 800280e:	89a3      	ldrh	r3, [r4, #12]
 8002810:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002814:	81a3      	strh	r3, [r4, #12]
 8002816:	2300      	movs	r3, #0
 8002818:	6063      	str	r3, [r4, #4]
 800281a:	6923      	ldr	r3, [r4, #16]
 800281c:	6023      	str	r3, [r4, #0]
 800281e:	89a3      	ldrh	r3, [r4, #12]
 8002820:	f043 0308 	orr.w	r3, r3, #8
 8002824:	81a3      	strh	r3, [r4, #12]
 8002826:	6923      	ldr	r3, [r4, #16]
 8002828:	b94b      	cbnz	r3, 800283e <__swsetup_r+0x9a>
 800282a:	89a3      	ldrh	r3, [r4, #12]
 800282c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002834:	d003      	beq.n	800283e <__swsetup_r+0x9a>
 8002836:	4621      	mov	r1, r4
 8002838:	4630      	mov	r0, r6
 800283a:	f000 f92f 	bl	8002a9c <__smakebuf_r>
 800283e:	89a0      	ldrh	r0, [r4, #12]
 8002840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002844:	f010 0301 	ands.w	r3, r0, #1
 8002848:	d00a      	beq.n	8002860 <__swsetup_r+0xbc>
 800284a:	2300      	movs	r3, #0
 800284c:	60a3      	str	r3, [r4, #8]
 800284e:	6963      	ldr	r3, [r4, #20]
 8002850:	425b      	negs	r3, r3
 8002852:	61a3      	str	r3, [r4, #24]
 8002854:	6923      	ldr	r3, [r4, #16]
 8002856:	b943      	cbnz	r3, 800286a <__swsetup_r+0xc6>
 8002858:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800285c:	d1ba      	bne.n	80027d4 <__swsetup_r+0x30>
 800285e:	bd70      	pop	{r4, r5, r6, pc}
 8002860:	0781      	lsls	r1, r0, #30
 8002862:	bf58      	it	pl
 8002864:	6963      	ldrpl	r3, [r4, #20]
 8002866:	60a3      	str	r3, [r4, #8]
 8002868:	e7f4      	b.n	8002854 <__swsetup_r+0xb0>
 800286a:	2000      	movs	r0, #0
 800286c:	e7f7      	b.n	800285e <__swsetup_r+0xba>
 800286e:	bf00      	nop
 8002870:	2000000c 	.word	0x2000000c
 8002874:	08002e3c 	.word	0x08002e3c
 8002878:	08002e5c 	.word	0x08002e5c
 800287c:	08002e1c 	.word	0x08002e1c

08002880 <abort>:
 8002880:	2006      	movs	r0, #6
 8002882:	b508      	push	{r3, lr}
 8002884:	f000 f99e 	bl	8002bc4 <raise>
 8002888:	2001      	movs	r0, #1
 800288a:	f7fe f97f 	bl	8000b8c <_exit>
	...

08002890 <_close_r>:
 8002890:	b538      	push	{r3, r4, r5, lr}
 8002892:	2300      	movs	r3, #0
 8002894:	4d05      	ldr	r5, [pc, #20]	; (80028ac <_close_r+0x1c>)
 8002896:	4604      	mov	r4, r0
 8002898:	4608      	mov	r0, r1
 800289a:	602b      	str	r3, [r5, #0]
 800289c:	f7fe f9b9 	bl	8000c12 <_close>
 80028a0:	1c43      	adds	r3, r0, #1
 80028a2:	d102      	bne.n	80028aa <_close_r+0x1a>
 80028a4:	682b      	ldr	r3, [r5, #0]
 80028a6:	b103      	cbz	r3, 80028aa <_close_r+0x1a>
 80028a8:	6023      	str	r3, [r4, #0]
 80028aa:	bd38      	pop	{r3, r4, r5, pc}
 80028ac:	200000a0 	.word	0x200000a0

080028b0 <__sflush_r>:
 80028b0:	898a      	ldrh	r2, [r1, #12]
 80028b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b4:	4605      	mov	r5, r0
 80028b6:	0710      	lsls	r0, r2, #28
 80028b8:	460c      	mov	r4, r1
 80028ba:	d457      	bmi.n	800296c <__sflush_r+0xbc>
 80028bc:	684b      	ldr	r3, [r1, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	dc04      	bgt.n	80028cc <__sflush_r+0x1c>
 80028c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	dc01      	bgt.n	80028cc <__sflush_r+0x1c>
 80028c8:	2000      	movs	r0, #0
 80028ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80028ce:	2e00      	cmp	r6, #0
 80028d0:	d0fa      	beq.n	80028c8 <__sflush_r+0x18>
 80028d2:	2300      	movs	r3, #0
 80028d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80028d8:	682f      	ldr	r7, [r5, #0]
 80028da:	602b      	str	r3, [r5, #0]
 80028dc:	d032      	beq.n	8002944 <__sflush_r+0x94>
 80028de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80028e0:	89a3      	ldrh	r3, [r4, #12]
 80028e2:	075a      	lsls	r2, r3, #29
 80028e4:	d505      	bpl.n	80028f2 <__sflush_r+0x42>
 80028e6:	6863      	ldr	r3, [r4, #4]
 80028e8:	1ac0      	subs	r0, r0, r3
 80028ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80028ec:	b10b      	cbz	r3, 80028f2 <__sflush_r+0x42>
 80028ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028f0:	1ac0      	subs	r0, r0, r3
 80028f2:	2300      	movs	r3, #0
 80028f4:	4602      	mov	r2, r0
 80028f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80028f8:	4628      	mov	r0, r5
 80028fa:	6a21      	ldr	r1, [r4, #32]
 80028fc:	47b0      	blx	r6
 80028fe:	1c43      	adds	r3, r0, #1
 8002900:	89a3      	ldrh	r3, [r4, #12]
 8002902:	d106      	bne.n	8002912 <__sflush_r+0x62>
 8002904:	6829      	ldr	r1, [r5, #0]
 8002906:	291d      	cmp	r1, #29
 8002908:	d82c      	bhi.n	8002964 <__sflush_r+0xb4>
 800290a:	4a29      	ldr	r2, [pc, #164]	; (80029b0 <__sflush_r+0x100>)
 800290c:	40ca      	lsrs	r2, r1
 800290e:	07d6      	lsls	r6, r2, #31
 8002910:	d528      	bpl.n	8002964 <__sflush_r+0xb4>
 8002912:	2200      	movs	r2, #0
 8002914:	6062      	str	r2, [r4, #4]
 8002916:	6922      	ldr	r2, [r4, #16]
 8002918:	04d9      	lsls	r1, r3, #19
 800291a:	6022      	str	r2, [r4, #0]
 800291c:	d504      	bpl.n	8002928 <__sflush_r+0x78>
 800291e:	1c42      	adds	r2, r0, #1
 8002920:	d101      	bne.n	8002926 <__sflush_r+0x76>
 8002922:	682b      	ldr	r3, [r5, #0]
 8002924:	b903      	cbnz	r3, 8002928 <__sflush_r+0x78>
 8002926:	6560      	str	r0, [r4, #84]	; 0x54
 8002928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800292a:	602f      	str	r7, [r5, #0]
 800292c:	2900      	cmp	r1, #0
 800292e:	d0cb      	beq.n	80028c8 <__sflush_r+0x18>
 8002930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002934:	4299      	cmp	r1, r3
 8002936:	d002      	beq.n	800293e <__sflush_r+0x8e>
 8002938:	4628      	mov	r0, r5
 800293a:	f7ff fab1 	bl	8001ea0 <_free_r>
 800293e:	2000      	movs	r0, #0
 8002940:	6360      	str	r0, [r4, #52]	; 0x34
 8002942:	e7c2      	b.n	80028ca <__sflush_r+0x1a>
 8002944:	6a21      	ldr	r1, [r4, #32]
 8002946:	2301      	movs	r3, #1
 8002948:	4628      	mov	r0, r5
 800294a:	47b0      	blx	r6
 800294c:	1c41      	adds	r1, r0, #1
 800294e:	d1c7      	bne.n	80028e0 <__sflush_r+0x30>
 8002950:	682b      	ldr	r3, [r5, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0c4      	beq.n	80028e0 <__sflush_r+0x30>
 8002956:	2b1d      	cmp	r3, #29
 8002958:	d001      	beq.n	800295e <__sflush_r+0xae>
 800295a:	2b16      	cmp	r3, #22
 800295c:	d101      	bne.n	8002962 <__sflush_r+0xb2>
 800295e:	602f      	str	r7, [r5, #0]
 8002960:	e7b2      	b.n	80028c8 <__sflush_r+0x18>
 8002962:	89a3      	ldrh	r3, [r4, #12]
 8002964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002968:	81a3      	strh	r3, [r4, #12]
 800296a:	e7ae      	b.n	80028ca <__sflush_r+0x1a>
 800296c:	690f      	ldr	r7, [r1, #16]
 800296e:	2f00      	cmp	r7, #0
 8002970:	d0aa      	beq.n	80028c8 <__sflush_r+0x18>
 8002972:	0793      	lsls	r3, r2, #30
 8002974:	bf18      	it	ne
 8002976:	2300      	movne	r3, #0
 8002978:	680e      	ldr	r6, [r1, #0]
 800297a:	bf08      	it	eq
 800297c:	694b      	ldreq	r3, [r1, #20]
 800297e:	1bf6      	subs	r6, r6, r7
 8002980:	600f      	str	r7, [r1, #0]
 8002982:	608b      	str	r3, [r1, #8]
 8002984:	2e00      	cmp	r6, #0
 8002986:	dd9f      	ble.n	80028c8 <__sflush_r+0x18>
 8002988:	4633      	mov	r3, r6
 800298a:	463a      	mov	r2, r7
 800298c:	4628      	mov	r0, r5
 800298e:	6a21      	ldr	r1, [r4, #32]
 8002990:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002994:	47e0      	blx	ip
 8002996:	2800      	cmp	r0, #0
 8002998:	dc06      	bgt.n	80029a8 <__sflush_r+0xf8>
 800299a:	89a3      	ldrh	r3, [r4, #12]
 800299c:	f04f 30ff 	mov.w	r0, #4294967295
 80029a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029a4:	81a3      	strh	r3, [r4, #12]
 80029a6:	e790      	b.n	80028ca <__sflush_r+0x1a>
 80029a8:	4407      	add	r7, r0
 80029aa:	1a36      	subs	r6, r6, r0
 80029ac:	e7ea      	b.n	8002984 <__sflush_r+0xd4>
 80029ae:	bf00      	nop
 80029b0:	20400001 	.word	0x20400001

080029b4 <_fflush_r>:
 80029b4:	b538      	push	{r3, r4, r5, lr}
 80029b6:	690b      	ldr	r3, [r1, #16]
 80029b8:	4605      	mov	r5, r0
 80029ba:	460c      	mov	r4, r1
 80029bc:	b913      	cbnz	r3, 80029c4 <_fflush_r+0x10>
 80029be:	2500      	movs	r5, #0
 80029c0:	4628      	mov	r0, r5
 80029c2:	bd38      	pop	{r3, r4, r5, pc}
 80029c4:	b118      	cbz	r0, 80029ce <_fflush_r+0x1a>
 80029c6:	6983      	ldr	r3, [r0, #24]
 80029c8:	b90b      	cbnz	r3, 80029ce <_fflush_r+0x1a>
 80029ca:	f7ff f9af 	bl	8001d2c <__sinit>
 80029ce:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <_fflush_r+0x6c>)
 80029d0:	429c      	cmp	r4, r3
 80029d2:	d11b      	bne.n	8002a0c <_fflush_r+0x58>
 80029d4:	686c      	ldr	r4, [r5, #4]
 80029d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0ef      	beq.n	80029be <_fflush_r+0xa>
 80029de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80029e0:	07d0      	lsls	r0, r2, #31
 80029e2:	d404      	bmi.n	80029ee <_fflush_r+0x3a>
 80029e4:	0599      	lsls	r1, r3, #22
 80029e6:	d402      	bmi.n	80029ee <_fflush_r+0x3a>
 80029e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029ea:	f7ff fa4f 	bl	8001e8c <__retarget_lock_acquire_recursive>
 80029ee:	4628      	mov	r0, r5
 80029f0:	4621      	mov	r1, r4
 80029f2:	f7ff ff5d 	bl	80028b0 <__sflush_r>
 80029f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029f8:	4605      	mov	r5, r0
 80029fa:	07da      	lsls	r2, r3, #31
 80029fc:	d4e0      	bmi.n	80029c0 <_fflush_r+0xc>
 80029fe:	89a3      	ldrh	r3, [r4, #12]
 8002a00:	059b      	lsls	r3, r3, #22
 8002a02:	d4dd      	bmi.n	80029c0 <_fflush_r+0xc>
 8002a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a06:	f7ff fa42 	bl	8001e8e <__retarget_lock_release_recursive>
 8002a0a:	e7d9      	b.n	80029c0 <_fflush_r+0xc>
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <_fflush_r+0x70>)
 8002a0e:	429c      	cmp	r4, r3
 8002a10:	d101      	bne.n	8002a16 <_fflush_r+0x62>
 8002a12:	68ac      	ldr	r4, [r5, #8]
 8002a14:	e7df      	b.n	80029d6 <_fflush_r+0x22>
 8002a16:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <_fflush_r+0x74>)
 8002a18:	429c      	cmp	r4, r3
 8002a1a:	bf08      	it	eq
 8002a1c:	68ec      	ldreq	r4, [r5, #12]
 8002a1e:	e7da      	b.n	80029d6 <_fflush_r+0x22>
 8002a20:	08002e3c 	.word	0x08002e3c
 8002a24:	08002e5c 	.word	0x08002e5c
 8002a28:	08002e1c 	.word	0x08002e1c

08002a2c <_lseek_r>:
 8002a2c:	b538      	push	{r3, r4, r5, lr}
 8002a2e:	4604      	mov	r4, r0
 8002a30:	4608      	mov	r0, r1
 8002a32:	4611      	mov	r1, r2
 8002a34:	2200      	movs	r2, #0
 8002a36:	4d05      	ldr	r5, [pc, #20]	; (8002a4c <_lseek_r+0x20>)
 8002a38:	602a      	str	r2, [r5, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f7fe f90d 	bl	8000c5a <_lseek>
 8002a40:	1c43      	adds	r3, r0, #1
 8002a42:	d102      	bne.n	8002a4a <_lseek_r+0x1e>
 8002a44:	682b      	ldr	r3, [r5, #0]
 8002a46:	b103      	cbz	r3, 8002a4a <_lseek_r+0x1e>
 8002a48:	6023      	str	r3, [r4, #0]
 8002a4a:	bd38      	pop	{r3, r4, r5, pc}
 8002a4c:	200000a0 	.word	0x200000a0

08002a50 <__swhatbuf_r>:
 8002a50:	b570      	push	{r4, r5, r6, lr}
 8002a52:	460e      	mov	r6, r1
 8002a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a58:	4614      	mov	r4, r2
 8002a5a:	2900      	cmp	r1, #0
 8002a5c:	461d      	mov	r5, r3
 8002a5e:	b096      	sub	sp, #88	; 0x58
 8002a60:	da08      	bge.n	8002a74 <__swhatbuf_r+0x24>
 8002a62:	2200      	movs	r2, #0
 8002a64:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002a68:	602a      	str	r2, [r5, #0]
 8002a6a:	061a      	lsls	r2, r3, #24
 8002a6c:	d410      	bmi.n	8002a90 <__swhatbuf_r+0x40>
 8002a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a72:	e00e      	b.n	8002a92 <__swhatbuf_r+0x42>
 8002a74:	466a      	mov	r2, sp
 8002a76:	f000 f8c1 	bl	8002bfc <_fstat_r>
 8002a7a:	2800      	cmp	r0, #0
 8002a7c:	dbf1      	blt.n	8002a62 <__swhatbuf_r+0x12>
 8002a7e:	9a01      	ldr	r2, [sp, #4]
 8002a80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002a84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002a88:	425a      	negs	r2, r3
 8002a8a:	415a      	adcs	r2, r3
 8002a8c:	602a      	str	r2, [r5, #0]
 8002a8e:	e7ee      	b.n	8002a6e <__swhatbuf_r+0x1e>
 8002a90:	2340      	movs	r3, #64	; 0x40
 8002a92:	2000      	movs	r0, #0
 8002a94:	6023      	str	r3, [r4, #0]
 8002a96:	b016      	add	sp, #88	; 0x58
 8002a98:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a9c <__smakebuf_r>:
 8002a9c:	898b      	ldrh	r3, [r1, #12]
 8002a9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002aa0:	079d      	lsls	r5, r3, #30
 8002aa2:	4606      	mov	r6, r0
 8002aa4:	460c      	mov	r4, r1
 8002aa6:	d507      	bpl.n	8002ab8 <__smakebuf_r+0x1c>
 8002aa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002aac:	6023      	str	r3, [r4, #0]
 8002aae:	6123      	str	r3, [r4, #16]
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	6163      	str	r3, [r4, #20]
 8002ab4:	b002      	add	sp, #8
 8002ab6:	bd70      	pop	{r4, r5, r6, pc}
 8002ab8:	466a      	mov	r2, sp
 8002aba:	ab01      	add	r3, sp, #4
 8002abc:	f7ff ffc8 	bl	8002a50 <__swhatbuf_r>
 8002ac0:	9900      	ldr	r1, [sp, #0]
 8002ac2:	4605      	mov	r5, r0
 8002ac4:	4630      	mov	r0, r6
 8002ac6:	f7ff fa53 	bl	8001f70 <_malloc_r>
 8002aca:	b948      	cbnz	r0, 8002ae0 <__smakebuf_r+0x44>
 8002acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ad0:	059a      	lsls	r2, r3, #22
 8002ad2:	d4ef      	bmi.n	8002ab4 <__smakebuf_r+0x18>
 8002ad4:	f023 0303 	bic.w	r3, r3, #3
 8002ad8:	f043 0302 	orr.w	r3, r3, #2
 8002adc:	81a3      	strh	r3, [r4, #12]
 8002ade:	e7e3      	b.n	8002aa8 <__smakebuf_r+0xc>
 8002ae0:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <__smakebuf_r+0x7c>)
 8002ae2:	62b3      	str	r3, [r6, #40]	; 0x28
 8002ae4:	89a3      	ldrh	r3, [r4, #12]
 8002ae6:	6020      	str	r0, [r4, #0]
 8002ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aec:	81a3      	strh	r3, [r4, #12]
 8002aee:	9b00      	ldr	r3, [sp, #0]
 8002af0:	6120      	str	r0, [r4, #16]
 8002af2:	6163      	str	r3, [r4, #20]
 8002af4:	9b01      	ldr	r3, [sp, #4]
 8002af6:	b15b      	cbz	r3, 8002b10 <__smakebuf_r+0x74>
 8002af8:	4630      	mov	r0, r6
 8002afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002afe:	f000 f88f 	bl	8002c20 <_isatty_r>
 8002b02:	b128      	cbz	r0, 8002b10 <__smakebuf_r+0x74>
 8002b04:	89a3      	ldrh	r3, [r4, #12]
 8002b06:	f023 0303 	bic.w	r3, r3, #3
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	81a3      	strh	r3, [r4, #12]
 8002b10:	89a0      	ldrh	r0, [r4, #12]
 8002b12:	4305      	orrs	r5, r0
 8002b14:	81a5      	strh	r5, [r4, #12]
 8002b16:	e7cd      	b.n	8002ab4 <__smakebuf_r+0x18>
 8002b18:	08001cc5 	.word	0x08001cc5

08002b1c <memchr>:
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	b510      	push	{r4, lr}
 8002b20:	b2c9      	uxtb	r1, r1
 8002b22:	4402      	add	r2, r0
 8002b24:	4293      	cmp	r3, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	d101      	bne.n	8002b2e <memchr+0x12>
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	e003      	b.n	8002b36 <memchr+0x1a>
 8002b2e:	7804      	ldrb	r4, [r0, #0]
 8002b30:	3301      	adds	r3, #1
 8002b32:	428c      	cmp	r4, r1
 8002b34:	d1f6      	bne.n	8002b24 <memchr+0x8>
 8002b36:	bd10      	pop	{r4, pc}

08002b38 <__malloc_lock>:
 8002b38:	4801      	ldr	r0, [pc, #4]	; (8002b40 <__malloc_lock+0x8>)
 8002b3a:	f7ff b9a7 	b.w	8001e8c <__retarget_lock_acquire_recursive>
 8002b3e:	bf00      	nop
 8002b40:	20000094 	.word	0x20000094

08002b44 <__malloc_unlock>:
 8002b44:	4801      	ldr	r0, [pc, #4]	; (8002b4c <__malloc_unlock+0x8>)
 8002b46:	f7ff b9a2 	b.w	8001e8e <__retarget_lock_release_recursive>
 8002b4a:	bf00      	nop
 8002b4c:	20000094 	.word	0x20000094

08002b50 <_read_r>:
 8002b50:	b538      	push	{r3, r4, r5, lr}
 8002b52:	4604      	mov	r4, r0
 8002b54:	4608      	mov	r0, r1
 8002b56:	4611      	mov	r1, r2
 8002b58:	2200      	movs	r2, #0
 8002b5a:	4d05      	ldr	r5, [pc, #20]	; (8002b70 <_read_r+0x20>)
 8002b5c:	602a      	str	r2, [r5, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f7fe f81e 	bl	8000ba0 <_read>
 8002b64:	1c43      	adds	r3, r0, #1
 8002b66:	d102      	bne.n	8002b6e <_read_r+0x1e>
 8002b68:	682b      	ldr	r3, [r5, #0]
 8002b6a:	b103      	cbz	r3, 8002b6e <_read_r+0x1e>
 8002b6c:	6023      	str	r3, [r4, #0]
 8002b6e:	bd38      	pop	{r3, r4, r5, pc}
 8002b70:	200000a0 	.word	0x200000a0

08002b74 <_raise_r>:
 8002b74:	291f      	cmp	r1, #31
 8002b76:	b538      	push	{r3, r4, r5, lr}
 8002b78:	4604      	mov	r4, r0
 8002b7a:	460d      	mov	r5, r1
 8002b7c:	d904      	bls.n	8002b88 <_raise_r+0x14>
 8002b7e:	2316      	movs	r3, #22
 8002b80:	6003      	str	r3, [r0, #0]
 8002b82:	f04f 30ff 	mov.w	r0, #4294967295
 8002b86:	bd38      	pop	{r3, r4, r5, pc}
 8002b88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002b8a:	b112      	cbz	r2, 8002b92 <_raise_r+0x1e>
 8002b8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002b90:	b94b      	cbnz	r3, 8002ba6 <_raise_r+0x32>
 8002b92:	4620      	mov	r0, r4
 8002b94:	f000 f830 	bl	8002bf8 <_getpid_r>
 8002b98:	462a      	mov	r2, r5
 8002b9a:	4601      	mov	r1, r0
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ba2:	f000 b817 	b.w	8002bd4 <_kill_r>
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d00a      	beq.n	8002bc0 <_raise_r+0x4c>
 8002baa:	1c59      	adds	r1, r3, #1
 8002bac:	d103      	bne.n	8002bb6 <_raise_r+0x42>
 8002bae:	2316      	movs	r3, #22
 8002bb0:	6003      	str	r3, [r0, #0]
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	e7e7      	b.n	8002b86 <_raise_r+0x12>
 8002bb6:	2400      	movs	r4, #0
 8002bb8:	4628      	mov	r0, r5
 8002bba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002bbe:	4798      	blx	r3
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	e7e0      	b.n	8002b86 <_raise_r+0x12>

08002bc4 <raise>:
 8002bc4:	4b02      	ldr	r3, [pc, #8]	; (8002bd0 <raise+0xc>)
 8002bc6:	4601      	mov	r1, r0
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	f7ff bfd3 	b.w	8002b74 <_raise_r>
 8002bce:	bf00      	nop
 8002bd0:	2000000c 	.word	0x2000000c

08002bd4 <_kill_r>:
 8002bd4:	b538      	push	{r3, r4, r5, lr}
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	4d06      	ldr	r5, [pc, #24]	; (8002bf4 <_kill_r+0x20>)
 8002bda:	4604      	mov	r4, r0
 8002bdc:	4608      	mov	r0, r1
 8002bde:	4611      	mov	r1, r2
 8002be0:	602b      	str	r3, [r5, #0]
 8002be2:	f7fd ffc3 	bl	8000b6c <_kill>
 8002be6:	1c43      	adds	r3, r0, #1
 8002be8:	d102      	bne.n	8002bf0 <_kill_r+0x1c>
 8002bea:	682b      	ldr	r3, [r5, #0]
 8002bec:	b103      	cbz	r3, 8002bf0 <_kill_r+0x1c>
 8002bee:	6023      	str	r3, [r4, #0]
 8002bf0:	bd38      	pop	{r3, r4, r5, pc}
 8002bf2:	bf00      	nop
 8002bf4:	200000a0 	.word	0x200000a0

08002bf8 <_getpid_r>:
 8002bf8:	f7fd bfb1 	b.w	8000b5e <_getpid>

08002bfc <_fstat_r>:
 8002bfc:	b538      	push	{r3, r4, r5, lr}
 8002bfe:	2300      	movs	r3, #0
 8002c00:	4d06      	ldr	r5, [pc, #24]	; (8002c1c <_fstat_r+0x20>)
 8002c02:	4604      	mov	r4, r0
 8002c04:	4608      	mov	r0, r1
 8002c06:	4611      	mov	r1, r2
 8002c08:	602b      	str	r3, [r5, #0]
 8002c0a:	f7fe f80d 	bl	8000c28 <_fstat>
 8002c0e:	1c43      	adds	r3, r0, #1
 8002c10:	d102      	bne.n	8002c18 <_fstat_r+0x1c>
 8002c12:	682b      	ldr	r3, [r5, #0]
 8002c14:	b103      	cbz	r3, 8002c18 <_fstat_r+0x1c>
 8002c16:	6023      	str	r3, [r4, #0]
 8002c18:	bd38      	pop	{r3, r4, r5, pc}
 8002c1a:	bf00      	nop
 8002c1c:	200000a0 	.word	0x200000a0

08002c20 <_isatty_r>:
 8002c20:	b538      	push	{r3, r4, r5, lr}
 8002c22:	2300      	movs	r3, #0
 8002c24:	4d05      	ldr	r5, [pc, #20]	; (8002c3c <_isatty_r+0x1c>)
 8002c26:	4604      	mov	r4, r0
 8002c28:	4608      	mov	r0, r1
 8002c2a:	602b      	str	r3, [r5, #0]
 8002c2c:	f7fe f80b 	bl	8000c46 <_isatty>
 8002c30:	1c43      	adds	r3, r0, #1
 8002c32:	d102      	bne.n	8002c3a <_isatty_r+0x1a>
 8002c34:	682b      	ldr	r3, [r5, #0]
 8002c36:	b103      	cbz	r3, 8002c3a <_isatty_r+0x1a>
 8002c38:	6023      	str	r3, [r4, #0]
 8002c3a:	bd38      	pop	{r3, r4, r5, pc}
 8002c3c:	200000a0 	.word	0x200000a0

08002c40 <_init>:
 8002c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c42:	bf00      	nop
 8002c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c46:	bc08      	pop	{r3}
 8002c48:	469e      	mov	lr, r3
 8002c4a:	4770      	bx	lr

08002c4c <_fini>:
 8002c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4e:	bf00      	nop
 8002c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c52:	bc08      	pop	{r3}
 8002c54:	469e      	mov	lr, r3
 8002c56:	4770      	bx	lr
